[{"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Who are the authors affiliated with 'X University'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author {affiliation:'X University'}) RETURN a.first_name, a.last_name, a.author_id;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What articles have been written by 'John Doe'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author {first_name:'John', last_name:'Doe'})-[:WRITTEN_BY]-(article:Article) RETURN article.title, article.article_id;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you list the affiliations of 'Jane Smith'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author {first_name:'Jane', last_name:'Smith'}) RETURN a.affiliation;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which authors from 'Y Institute' have published articles in the 'Journal of Science'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author {affiliation:'Y Institute'})-[:WRITTEN_BY]-(article:Article)-[:PUBLISHED_IN]-(j:Journal {name: 'Journal of Science'}) RETURN a.first_name, a.last_name, article.title;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Retrieve all articles by 'Alice Johnson' and their publication years.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author {first_name:'Alice', last_name:'Johnson'})-[:WRITTEN_BY]-(article:Article)-[:PUBLISHED_IN]-(journal:Journal) RETURN article.title, article.article_id, journal.year;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the total number of articles written by authors from 'Z College'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author {affiliation:'Z College'})-[:WRITTEN_BY]-(article:Article) RETURN count(article);"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Show the titles of articles authored by 'Emma White' along with the keywords associated with each article.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author {first_name:'Emma', last_name:'White'})-[:WRITTEN_BY]-(article:Article)-[:HAS_KEY]-(keyword:Keyword) RETURN article.title, keyword.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Find all authors who have written about the topic with label 'Artificial Intelligence'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (topic:Topic {label: 'Artificial Intelligence'})<-[:HAS_TOPIC]-(keyword:Keyword)<-[:HAS_KEY]-(article:Article)<-[:WRITTEN_BY]-(author:Author) RETURN DISTINCT author.first_name, author.last_name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which authors have updated their articles in the year 2022?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)-[:WRITTEN_BY]-(article:Article)-[:UPDATED]-(updateDate:UpdateDate) WHERE updateDate.update_date.year = 2022 RETURN DISTINCT author.first_name, author.last_name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "List the first and last names of authors who have both written and updated an article on the same day.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)-[:WRITTEN_BY]-(article:Article)-[:UPDATED]-(updateDate:UpdateDate) WHERE article.creation_date = updateDate.update_date RETURN DISTINCT author.first_name, author.last_name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the names of authors who don't have any affiliation listed?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author) WHERE author.affiliation IS NULL RETURN author.first_name, author.last_name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you show me the most prolific author based on the number of articles written?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)-[:WRITTEN_BY]-(article:Article) RETURN author.first_name, author.last_name, count(article) as articles_written ORDER BY articles_written DESC LIMIT 1;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which authors are affiliated with 'X University' and have written more than 5 articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {affiliation:'X University'})-[:WRITTEN_BY]-(article:Article) WITH author, count(article) as articles_count WHERE articles_count > 5 RETURN author.first_name, author.last_name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the recent articles written by authors of 'M Museum' in the last year?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {affiliation:'M Museum'})-[:WRITTEN_BY]-(article:Article)-[:UPDATED]-(updateDate:UpdateDate) WHERE updateDate.update_date.year >= 2022 RETURN article.title, article.article_id;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there any authors who have collaborated on more than one article?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)-[:WRITTEN_BY]-(article:Article) WITH author, collect(article) as articles WHERE size(articles) > 1 RETURN author.first_name, author.last_name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Retrieve the list of articles and the number of times they were updated by 'Oliver Brown'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {first_name:'Oliver', last_name:'Brown'})-[:WRITTEN_BY]-(article:Article)-[:UPDATED]-(updateDate:UpdateDate) RETURN article.title, count(updateDate) as updates_count;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the former affiliations of 'Sophia Davis' if any?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {first_name:'Sophia', last_name:'Davis'}) RETURN author.affiliation;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you show the distribution of authors' affiliations?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author) RETURN author.affiliation, count(*) as number_of_authors ORDER BY number_of_authors DESC;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which article written by 'Liam Johnson' has the most keywords associated with it?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {first_name:'Liam', last_name:'Johnson'})-[:WRITTEN_BY]-(article:Article)-[:HAS_KEY]-(keyword:Keyword) WITH article, count(keyword) as keywords_count ORDER BY keywords_count DESC LIMIT 1 RETURN article.title, keywords_count;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "List all the articles from 'Journal of Advanced Research' and their corresponding authors.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (journal:Journal {name: 'Journal of Advanced Research'})<-[:PUBLISHED_IN]-(article:Article)<-[:WRITTEN_BY]-(author:Author) RETURN article.title, author.first_name, author.last_name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which articles written by 'Ethan Wilson' have been updated this year?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {first_name:'Ethan', last_name:'Wilson'})-[:WRITTEN_BY]-(article:Article)-[:UPDATED]-(updateDate:UpdateDate) WHERE updateDate.update_date.year = 2023 RETURN article.title, article.article_id;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there any authors who have written an article but not updated it?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)-[:WRITTEN_BY]-(article:Article) WHERE NOT (article)-[:UPDATED]-() RETURN DISTINCT author.first_name, author.last_name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many articles have been written by authors with the last name 'Taylor'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {last_name:'Taylor'})-[:WRITTEN_BY]-(article:Article) RETURN count(article) as authored_articles;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Who are the co-authors of the article with the ID '12345'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (article:Article {article_id:12345})<-[:WRITTEN_BY]-(author:Author) RETURN author.first_name, author.last_name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the average number of articles written by authors at 'N University'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {affiliation:'N University'})-[:WRITTEN_BY]-(article:Article) RETURN avg(size((author)-[:WRITTEN_BY]->())) as average_articles;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Find all articles by 'Zoe Brown' that have a keyword related to 'Machine Learning'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {first_name:'Zoe', last_name:'Brown'})-[:WRITTEN_BY]-(article:Article)-[:HAS_KEY]-(keyword:Keyword)-[:HAS_TOPIC]-(topic:Topic {label: 'Machine Learning'}) RETURN article.title, article.article_id;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you list authors who have written in the category 'Quantum Physics'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (category:Categories {specifications:'Quantum Physics'})<-[:HAS_CATEGORY]-(article:Article)<-[:WRITTEN_BY]-(author:Author) RETURN DISTINCT author.first_name, author.last_name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many articles have been published by authors while being affiliated with 'Tech Labs'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {affiliation:'Tech Labs'})-[:WRITTEN_BY]-(article:Article) RETURN count(article) as publication_count;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Show the top 3 journals based on the number of articles from 'P University' authors.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (journal:Journal)<-[:PUBLISHED_IN]-(article:Article)<-[:WRITTEN_BY]-(author:Author {affiliation:'P University'}) RETURN journal.name, count(article) as articles_count ORDER BY articles_count DESC LIMIT 3;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "List the article titles along with their DOI for the author with the highest number of publications.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)-[:WRITTEN_BY]-(article:Article)-[:HAS_DOI]-(doi:DOI) WITH author, count(article) as articles_count ORDER BY articles_count DESC LIMIT 1 MATCH (author)-[:WRITTEN_BY]-(article)-[:HAS_DOI]-(doi) RETURN article.title, doi.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Who are authors that have only written articles without any associated keyword?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)-[:WRITTEN_BY]-(article:Article) WHERE NOT (article)-[:HAS_KEY]->(:Keyword) RETURN DISTINCT author.first_name, author.last_name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which authors have a Keyword named 'Genomics' in their articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (keyword:Keyword {name:'Genomics'})<-[:HAS_KEY]-(article:Article)<-[:WRITTEN_BY]-(author:Author) RETURN DISTINCT author.first_name, author.last_name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can we find any authors whose articles have no reports linked?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)-[:WRITTEN_BY]-(article:Article) WHERE NOT (article)-[:HAS_REPORT]\u2192(:Report) RETURN DISTINCT author.first_name, author.last_name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "List all authors who have updated their articles on '2023-01-01'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)-[:WRITTEN_BY]-(article:Article)-[:UPDATED]-(updateDate:UpdateDate) WHERE updateDate.update_date = date('2023-01-01') RETURN author.first_name, author.last_name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the most common affiliations among authors who have written about 'Climate Change'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (topic:Topic {description: 'Climate Change'})\u2190[:HAS_TOPIC]-(keyword:Keyword)<-[:HAS_KEY]-(article:Article)<-[:WRITTEN_BY]-(author:Author) RETURN author.affiliation, count(*) as frequency ORDER BY frequency DESC;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Find the authors who have published both in 'Journal A' and 'Journal B'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)-[:WRITTEN_BY]-(article:Article)-[:PUBLISHED_IN]-(journal:Journal) WHERE journal.name IN ['Journal A', 'Journal B'] WITH author, count(DISTINCT journal) as journals_count WHERE journals_count > 1 RETURN author.first_name, author.last_name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "List the first and last names of authors who have written articles with over 10 pages.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)-[:WRITTEN_BY]-(article:Article)-[pub:PUBLISHED_IN]-() WHERE toInteger(pub.pages) > 10 RETURN author.first_name, author.last_name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Show authors who have an article with at least three different keywords.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)-[:WRITTEN_BY]-(article:Article)-[:HAS_KEY]->(keyword:Keyword) WITH author, article, count(DISTINCT keyword) as keyword_count WHERE keyword_count >= 3 RETURN author.first_name, author.last_name, article.title;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can we find authors that have not written any article in the last two years?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)-[:WRITTEN_BY]-(article:Article)-[:PUBLISHED_IN]-(journal:Journal) WHERE journal.year < 2021 RETURN DISTINCT author.first_name, author.last_name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the titles and abstracts of articles by 'Laura Green' in the field of 'Neuroscience'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {first_name:'Laura', last_name:'Green'})-[:WRITTEN_BY]-(article:Article)-[:HAS_KEY]-(keyword:Keyword)-[:HAS_TOPIC]-(topic:Topic {description: 'Neuroscience'}) RETURN article.title, article.abstract;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the titles of articles updated in the last month?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(u:UpdateDate) WHERE u.update_date >= date()-duration('P1M') RETURN a.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you list the abstracts and titles of articles updated since the beginning of the year?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(u:UpdateDate) WHERE u.update_date > date('2023-01-01') RETURN a.abstract, a.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the top 10 dates with the most article updates?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(u:UpdateDate) RETURN u.update_date as Date, count(a) as Updates ORDER BY Date DESC LIMIT 10"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Who are the authors of articles updated in the last week?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Author)-[:WRITTEN_BY]-(a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date >= date()-duration('P7D') RETURN DISTINCT a.author_id"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which articles were updated in the year 2023?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE u.update_date.year = 2023 RETURN a.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the titles of articles updated on March 1, 2023, along with their respective journals?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)-[:PUBLISHED_IN]-(a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date = date('2023-03-01') RETURN j.name, collect(a.title)"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What comments do articles updated in June have?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE u.update_date.month = 6 RETURN a.comments"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you provide a list of article IDs, titles, and their update dates for articles updated in the first quarter of 2023, ordered by the most recent update?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date >= date('2023-01-01') and ud.update_date < date('2023-04-01') RETURN a.article_id, a.title, ud.update_date ORDER BY ud.update_date DESC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many articles have been updated in the past year?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date >= date()-duration('P1Y') RETURN count(a) as total"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which topics had articles updated in February, and how many updates were there for each topic?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (t:Topic)-[:HAS_TOPIC]<-(k:Keyword)<-[:HAS_KEY]-(a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date.month = 2 RETURN t.label, count(*) as update_count"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Please provide the titles of articles updated since March 1, 2023, along with the length of their update path?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH p=(a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date >= date('2023-03-01') RETURN a.title, length(p) as path_length ORDER BY path_length DESC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you give me the titles of articles updated in the 10th week of the year?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date.week = 10 RETURN a.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the titles and comments of articles updated yesterday?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date = date()-duration('P1D') RETURN a.title, a.comments"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the titles and IDs of articles updated on the 15th of May?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date.day = 15 AND ud.update_date.month = 5 RETURN a.title, a.article_id"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which articles have never been updated?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article), (u:UpdateDate) WHERE NOT (a)-[:UPDATED]->(u) RETURN a.title, a.abstract"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the specifications of categories whose articles have been updated in the last six months?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (c:Categories)-[:HAS_CATEGORY]<-(a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date >= date()-duration('P6M') RETURN DISTINCT c.specifications"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Could you tell me the titles of distinct articles that were updated in the last month in comparison to others?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a1:Article)-[:UPDATED]->(ud:UpdateDate), (a2:Article) WHERE a1 <> a2 AND ud.update_date >= date()-duration('P1M') RETURN a1.title, a2.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many articles were updated in February 2023?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date >= date('2023-02-01') AND ud.update_date < date('2023-03-01') WITH count(a) as feb_updates RETURN feb_updates"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the first 5 article titles updated in the last 3 months?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date >= date()-duration({months: 3}) RETURN a.title ORDER BY ud.update_date LIMIT 5"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you list the report numbers and their associated article titles updated in the year 2022?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (r:Report)-[:HAS_REPORT]<-(a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date.year = 2022 RETURN r.report_no, collect(a.title)"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the title and update date of the most recently updated article in the last 2 weeks?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date >= date()-duration({weeks: 2}) WITH a ORDER BY ud.update_date DESC LIMIT 1 RETURN a.title, ud.update_date"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the IDs and titles of articles that were updated on March 15, 2023?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date = date({year: 2023, month: 3, day: 15}) RETURN a.article_id, a.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which articles were updated in odd-numbered years?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date.year % 2 = 1 RETURN a.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the titles of articles updated in the spring months (April, May, June)?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date.month IN [4, 5, 6] RETURN a.title AS SpringTitles"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "On which day of the week do most article updates happen?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) RETURN ud.update_date.dayOfWeek, count(*) as updates_per_day ORDER BY updates_per_day DESC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you provide IDs and comments of articles that were updated within the last 24 hours, ordered by article ID?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date >= date()-duration('P1D') RETURN a.article_id, a.comments ORDER BY a.article_id"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which articles were updated in the third quarter, and what were their update dates?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date.quarter = 3 RETURN a.title, ud.update_date"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the titles and abstracts of the first 3 articles updated since the start of 2023?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date >= date('2023-01-01') RETURN a.title, a.abstract ORDER BY ud.update_date ASC LIMIT 3"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which articles were updated on February 29, 2023?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date = date({year: 2023, month: 2, day: 29}) RETURN a.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What titles and update dates are associated with articles updated on the first day of any month?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date.day = 1 RETURN a.title, ud.update_date"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which articles have titles that were updated in the last 30 days as per the timestamp?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date.timestamp() > timestamp() - (86400 * 30) RETURN a.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you list the titles of articles along with the years they were updated, in ascending order of year?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) RETURN a.title, ud.update_date.year AS UpdatedYear ORDER BY UpdatedYear"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the titles and update dates of articles last updated on or before December 31, 2021?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date <= date('2021-12-31') RETURN a.title, ud.update_date"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the abstracts of articles updated between the 20th and 25th of any month?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(UpdateDate) WHERE u.update_date.day >= 20 AND u.update_date.day <= 25 RETURN a.abstract"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which articles were updated around Christmas (24th to 26th December), and what were their update dates?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date.month = 12 AND ud.update_date.day >= 24 AND ud.update_date.day <= 26 RETURN a.title, ud.update_date"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you list the abstracts and titles of articles updated in April 2023?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date >= date('2023-04-01') AND ud.update_date < date('2023-05-01') RETURN a.abstract, a.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many articles have been updated on a Friday?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date.dayOfWeek = 5 RETURN count(a) AS FridayUpdates"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you provide the titles and update dates for articles updated in the month of September?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate)-[:IN_MONTH]->(m:Month) WHERE m.name = 'September' RETURN a.title, ud.update_date"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which articles have been updated today?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date >= date()-duration({days: 0, hours: 0, minutes: 0, seconds: 0, milliseconds: 0}) RETURN a.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which articles were updated in 2022 but not on January 1st, 2023?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date.year = 2022 AND NOT (a)-[:UPDATED]->(ud2:UpdateDate {update_date: date('2023-01-01')}) RETURN a.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Who are the top five authors with the highest number of co-authored articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author)-[:WRITTEN_BY]-(ar:Article)-[:WRITTEN_BY]-(coAuthors:Author) WHERE a.author_id <> coAuthors.author_id RETURN a.author_id, count(DISTINCT coAuthors) AS co_authors ORDER BY co_authors DESC LIMIT 5"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you identify the pair of authors that have the most collaborations on articles together?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a1:Author)-[:WRITTEN_BY]-(art:Article)-[:WRITTEN_BY]-(a2:Author) WHERE a1.author_id < a2.author_id RETURN a1.first_name + ' ' + a1.last_name AS author1, a2.first_name + ' ' + a2.last_name AS author2, COUNT(art) AS collaboration_count ORDER BY collaboration_count DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the main topics that two specific authors have collaborated on?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (auth1:Author {author_id: 'A1'})-[:WRITTEN_BY]-(art:Article)-[:HAS_KEY]-(k:Keyword)-[:HAS_TOPIC]-(t:Topic), (auth2:Author {author_id: 'A2'})-[:WRITTEN_BY]-(art) WHERE auth1.author_id <> auth2.author_id RETURN DISTINCT t.label"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many authors have published articles without any co-authors?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author)-[:WRITTEN_BY]-(art:Article) WHERE NOT (art)-[:WRITTEN_BY]-(:Author {author_id <> a.author_id}) RETURN COUNT(DISTINCT a) AS solo_author_count"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can we see a list of authors who have co-authored with a specific author, let's say author_id 'A123'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (mainAuth:Author {author_id: 'A123'})-[:WRITTEN_BY]-(art:Article)-[:WRITTEN_BY]-(coAuth:Author) WHERE mainAuth.author_id <> coAuth.author_id RETURN DISTINCT coAuth.first_name + ' ' + coAuth.last_name AS co_authors"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which authors have collaborated on articles across the most number of different topics?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author)-[:WRITTEN_BY]-(art:Article)-[:HAS_KEY]-(k:Keyword)-[:HAS_TOPIC]-(t:Topic) RETURN a.first_name + ' ' + a.last_name AS author, COUNT(DISTINCT t) AS topic_count ORDER BY topic_count DESC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the average number of co-authors per article for a given journal, say 'Journal of Data Science'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal {name: 'Journal of Data Science'})<-[:PUBLISHED_IN]-(art:Article)-[:WRITTEN_BY]-(a:Author) RETURN avg(size((art)-[:WRITTEN_BY]-(:Author))) AS average_coauthors"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Has there been a case where authors have written multiple articles on the same topic? If so, list those instances.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author)-[:WRITTEN_BY]-(art:Article)-[:HAS_KEY]-(k:Keyword)-[:HAS_TOPIC]-(t:Topic) WITH a, t, COLLECT(art) AS articles WHERE size(articles) > 1 RETURN a.first_name + ' ' + a.last_name AS author, t.label AS topic, size(articles) AS article_count"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there any authors who have worked together exclusively without collaborating with anyone else?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a1:Author)-[:WRITTEN_BY]-(art:Article)-[:WRITTEN_BY]-(a2:Author) WITH a1, a2, COLLECT(DISTINCT art) AS articles WHERE ALL(ar IN articles WHERE size((ar)-[:WRITTEN_BY]-(:Author)) = 2) RETURN a1.first_name + ' ' + a1.last_name AS author1, a2.first_name + ' ' + a2.last_name AS author2, size(articles) AS exclusive_collabs"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which article has the most number of authors, and can you list them?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (art:Article)-[:WRITTEN_BY]-(a:Author) WITH art, COUNT(a) AS num_authors ORDER BY num_authors DESC LIMIT 1 MATCH (art)-[:WRITTEN_BY]-(authors:Author) RETURN art.title, COLLECT(authors.first_name + ' ' + authors.last_name) AS author_list"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many articles did each author publish last year?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author)-[:WRITTEN_BY]-(art:Article)-[:PUBLISHED_IN]-(j:Journal {year: date().year - 1}) RETURN a.first_name + ' ' + a.last_name AS author, COUNT(art) AS articles_count"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can we find authors who have never collaborated with anyone else?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author)-[:WRITTEN_BY]-(art:Article) WHERE NOT (art)-[:WRITTEN_BY]-(:Author {author_id <> a.author_id}) RETURN a.first_name + ' ' + a.last_name AS solo_authors"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Who are the authors that have published articles with the widest range of topics?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author)-[:WRITTEN_BY]-(art:Article)-[:HAS_KEY]-(k:Keyword)-[:HAS_TOPIC]-(t:Topic) RETURN a.first_name + ' ' + a.last_name AS author, COUNT(DISTINCT t) AS distinct_topics ORDER BY distinct_topics DESC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "I'm looking for articles where the authors have collaborated repeatedly; can you list the articles with repeated author pairs?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a1:Author)-[:WRITTEN_BY]-(art:Article)-[:WRITTEN_BY]-(a2:Author) WHERE a1.author_id < a2.author_id WITH a1, a2, art, COUNT(art) AS collaborations WHERE collaborations > 1 RETURN art.title, a1.first_name + ' ' + a1.last_name AS author1, a2.first_name + ' ' + a2.last_name AS author2 ORDER BY collaborations DESC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which authors have the most co-authors but the least articles, suggesting they collaborate widely but not frequently?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author)-[:WRITTEN_BY]-(art:Article) WITH a, COUNT(DISTINCT art) AS articles, COUNT(DISTINCT (:Author)-[:WRITTEN_BY]-(art)) - 1 AS coAuthors WHERE coAuthors > 0 RETURN a.first_name + ' ' + a.last_name AS author, articles, coAuthors ORDER BY coAuthors DESC, articles ASC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can we find the list of co-authors for the most published author?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author)-[:WRITTEN_BY]-(art:Article) WITH a, COUNT(art) AS num_articles ORDER BY num_articles DESC LIMIT 1 MATCH (a)-[:WRITTEN_BY]-(art)-[:WRITTEN_BY]-(coAuthors:Author) RETURN a.first_name + ' ' + a.last_name AS most_published_author, COLLECT(DISTINCT coAuthors.first_name + ' ' + coAuthors.last_name) AS co_author_list"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which author pairs have written at least three articles together?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a1:Author)-[:WRITTEN_BY]-(art:Article)-[:WRITTEN_BY]-(a2:Author) WHERE a1.author_id < a2.author_id WITH a1, a2, COUNT(art) AS collaboration_count WHERE collaboration_count >= 3 RETURN a1.first_name + ' ' + a1.last_name AS author1, a2.first_name + ' ' + a2.last_name AS author2, collaboration_count"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the most common topic amongst articles authored by a specific author, say author_id 'A789'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author {author_id: 'A789'})-[:WRITTEN_BY]-(art:Article)-[:HAS_KEY]-(k:Keyword)-[:HAS_TOPIC]-(t:Topic) RETURN t.label, COUNT(t) AS count ORDER BY count DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there any authors who have published in every year of the last decade?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author)-[:WRITTEN_BY]-(art:Article)-[:PUBLISHED_IN]-(j:Journal) WITH a, collect(DISTINCT j.year) AS years WHERE all(year IN range(date().year-10, date().year-1) WHERE year IN years) RETURN a.first_name + ' ' + a.last_name AS consistent_authors"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many distinct co-authors does the least collaborative author have?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author)-[:WRITTEN_BY]-(art:Article) WITH a, COUNT(DISTINCT (:Author)-[:WRITTEN_BY]-(art)) - 1 AS coAuthors WHERE coAuthors > 0 RETURN a.first_name + ' ' + a.last_name AS author, coAuthors ORDER BY coAuthors ASC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can we identify any authors who have a shared topic of interest but have never collaborated?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a1:Author)-[:WRITTEN_BY]-(art1:Article)-[:HAS_KEY]-(k1:Keyword)-[:HAS_TOPIC]-(t:Topic)<-[:HAS_TOPIC]-(k2:Keyword)<-[:HAS_KEY]-(art2:Article)<-[:WRITTEN_BY]-(a2:Author) WHERE a1.author_id <> a2.author_id AND NOT (a1)-[:WRITTEN_BY]-()<-[:WRITTEN_BY]-(a2) RETURN DISTINCT a1.first_name + ' ' + a1.last_name AS author1, a2.first_name + ' ' + a2.last_name AS author2, t.label AS shared_topic"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the average number of articles published per author in a specific year, say 2022?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author)-[:WRITTEN_BY]-(art:Article)-[:PUBLISHED_IN]-(j:Journal {year: 2022}) WITH a, COUNT(art) AS articles_per_author RETURN avg(articles_per_author) AS average_articles"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many authors have published at least one article solo and at least one article with a co-author?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author)-[:WRITTEN_BY]-(art:Article) WITH a, COLLECT(DISTINCT art) AS articles WHERE any(ar IN articles WHERE size((ar)-[:WRITTEN_BY]-(:Author)) = 1) AND any(ar IN articles WHERE size((ar)-[:WRITTEN_BY]-(:Author)) > 1) RETURN COUNT(DISTINCT a) AS versatile_authors"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can we trace the collaboration history between two authors, say 'A111' and 'A222', by listing the articles they have worked on together?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a1:Author {author_id: 'A111'})-[:WRITTEN_BY]-(art:Article)-[:WRITTEN_BY]-(a2:Author {author_id: 'A222'}) RETURN art.title AS collaborated_articles"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which author has the largest number of unique co-authors over the years?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author)-[:WRITTEN_BY]-(art:Article)-[:WRITTEN_BY]-(coAuth:Author) WHERE a.author_id <> coAuth.author_id WITH a, COUNT(DISTINCT coAuth) AS unique_coauthors ORDER BY unique_coauthors DESC LIMIT 1 RETURN a.first_name + ' ' + a.last_name AS author, unique_coauthors"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the most common topics among the articles that have more than three authors?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (art:Article)-[:HAS_KEY]-(k:Keyword)-[:HAS_TOPIC]-(t:Topic) WHERE size((art)-[:WRITTEN_BY]-(:Author)) > 3 RETURN t.label AS topic, COUNT(t) AS topic_count ORDER BY topic_count DESC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which author has the greatest number of articles with a single co-author, and who is that co-author?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a1:Author)-[:WRITTEN_BY]-(art:Article)-[:WRITTEN_BY]-(a2:Author) WITH a1, a2, COUNT(art) AS articles_together ORDER BY articles_together DESC LIMIT 1 RETURN a1.first_name + ' ' + a1.last_name AS author, a2.first_name + ' ' + a2.last_name AS co_author, articles_together"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many articles have been authored by a group of authors who consistently work together?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author)-[:WRITTEN_BY]-(art:Article) WITH COLLECT(a) AS authors, art WHERE ALL(a1 IN authors WHERE all(a2 IN authors WHERE a1 <> a2 WITH a1, a2 MATCH p=((a1)-[:WRITTEN_BY]-(:Article)-[:WRITTEN_BY]-(a2)) WHERE size(nodes(p)) = 3)) RETURN COUNT(DISTINCT art) AS group_collaborations_articles"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you determine which author has collaborated with the most number of non-repeating co-authors?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author)-[:WRITTEN_BY]-(art:Article)-[:WRITTEN_BY]-(coAuth:Author) WHERE a.author_id <> coAuth.author_id AND NOT (a)-[:WRITTEN_BY]-()<-[:WRITTEN_BY]-(coAuth) WITH a, COUNT(DISTINCT coAuth) AS non_repeating_coauthors ORDER BY non_repeating_coauthors DESC LIMIT 1 RETURN a.first_name + ' ' + a.last_name AS author, non_repeating_coauthors"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What's the ratio of articles that have co-authorship to solo authorship?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (art:Article) WITH 'Total' AS label, COUNT(art) AS total_articles MATCH (art:Article) WHERE size((art)-[:WRITTEN_BY]-(:Author)) = 1 RETURN 'Solo-authored/Total' AS type, COUNT(art) AS solo_authored_articles, total_articles, toFloat(COUNT(art))/total_articles AS ratio"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can we find the most prolific author in a particular category, say 'Data Mining'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (c:Categories {specifications: 'Data Mining'})<-[:HAS_CATEGORY]-(art:Article)-[:WRITTEN_BY]-(a:Author) RETURN a.first_name + ' ' + a.last_name AS author, COUNT(DISTINCT art) AS article_count ORDER BY article_count DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which author has contributed to the most number of reports?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author)-[:WRITTEN_BY]-(art:Article)-[:HAS_REPORT]-(r:Report) RETURN a.first_name + ' ' + a.last_name AS author, COUNT(DISTINCT r) AS reports_contributed ORDER BY reports_contributed DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "For authors with at least five published articles, who has the most diverse set of co-authors?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author)-[:WRITTEN_BY]-(art:Article) WITH a, COUNT(DISTINCT art) AS articles WHERE articles >= 5 WITH a, COUNT(DISTINCT (:Author)-[:WRITTEN_BY]-(art)) - 1 AS coAuthors RETURN a.first_name + ' ' + a.last_name AS author, coAuthors ORDER BY coAuthors DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Have any authors published articles in all the categories available in the database?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (c:Categories) WITH COUNT(c) AS total_categories MATCH (a:Author)-[:WRITTEN_BY]-(art:Article)-[:HAS_CATEGORY]-(:Categories) WITH a, COUNT(DISTINCT art) AS categories_published, total_categories WHERE categories_published = total_categories RETURN a.first_name + ' ' + a.last_name AS all_category_author"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What's the total number of unique authorship pairs in the database?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a1:Author)-[:WRITTEN_BY]-(art:Article)-[:WRITTEN_BY]-(a2:Author) WHERE a1.author_id < a2.author_id RETURN COUNT(DISTINCT a1.author_id + '-' + a2.author_id) AS unique_authorship_pairs"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which authors have only ever co-authored with authors from the same affiliation?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a1:Author)-[:WRITTEN_BY]-(art:Article)-[:WRITTEN_BY]-(a2:Author) WHERE a1.affiliation <> '' AND all(a2 IN COLLECT(DISTINCT a2) WHERE a1.affiliation = a2.affiliation) RETURN DISTINCT a1.first_name + ' ' + a1.last_name AS author"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many articles, on average, have been co-authored by pairs of authors?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a1:Author)-[:WRITTEN_BY]-(art:Article)-[:WRITTEN_BY]-(a2:Author) WHERE a1.author_id < a2.author_id WITH a1, a2, COUNT(art) AS articles RETURN avg(articles) AS avg_articles_per_author_pair"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you show me the top three most collaborative journals, in terms of the number of authors per article?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)<-[:PUBLISHED_IN]-(art:Article) MATCH (a:Author)-[:WROTE]->(art) WITH j, avg(size((art)<-[:WROTE]-(a))) AS avgAuthors RETURN j.name, avgAuthors ORDER BY avgAuthors DESC  LIMIT 3"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you show me all the unique categories of articles available?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_CATEGORY]->(c:Categories) RETURN DISTINCT c.specifications"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many articles have been classified under each category?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_CATEGORY]->(c:Categories) RETURN c.specifications, count(a) AS NumberOfArticles ORDER BY NumberOfArticles DESC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which articles have specifications mentioning 'quantum computing'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_CATEGORY]->(c:Categories) WHERE c.specifications CONTAINS 'quantum computing' RETURN a.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Could you list the categories with articles published during the last 5 years?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_CATEGORY]->(c:Categories)-[:PUBLISHED_IN]->(j:Journal) WHERE j.year >= (date().year - 5) RETURN DISTINCT c.specifications"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the titles of articles in the 'Artificial Intelligence' category?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_CATEGORY]->(c:Categories {specifications: 'Artificial Intelligence'}) RETURN a.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Is there a trend in the number of articles per category over recent years?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_CATEGORY]->(c:Categories), (a)-[:PUBLISHED_IN]->(j:Journal) RETURN c.specifications, j.year, count(a) ORDER BY j.year DESC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which category has the fewest articles associated with it?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_CATEGORY]->(c:Categories) RETURN c.specifications ORDER BY count(a) ASC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you display all categories that have more than ten articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_CATEGORY]->(c:Categories) WITH c.specifications AS Category, count(a) AS ArticlesCount WHERE ArticlesCount > 10 RETURN Category"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What categories haven't been assigned any articles yet?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (c:Categories) WHERE NOT (c)<-[:HAS_CATEGORY]-(:Article) RETURN c.specifications"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How can I find categories associated with articles by a certain 'John Doe' author?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_CATEGORY]->(c:Categories)<-[:WRITTEN_BY]-(au:Author {first_name: 'John', last_name: 'Doe'}) RETURN DISTINCT c.specifications"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What specifications are common among categories with articles on 'climate change'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_KEYWORD]->(:Keyword)-[:HAS_TOPIC]->(:Topic {description: 'climate change'})-[:HAS_CATEGORY]->(c:Categories) RETURN DISTINCT c.specifications"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you find categories where all articles have been updated this year?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_CATEGORY]->(c:Categories), (a)-[:UPDATED]->(u:UpdateDate) WHERE u.update_date >= date({year:date().year}) RETURN DISTINCT c.specifications"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there any categories that share a common keyword with a specific article?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_CATEGORY]->(c1:Categories), (k:Keyword)<-[:HAS_KEY]-(a)-[:HAS_CATEGORY]->(c2:Categories) WHERE c1 <> c2 RETURN DISTINCT c1.specifications, c2.specifications"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How are articles about 'neural networks' distributed across categories?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_CATEGORY]->(c:Categories), (a)-[:HAS_KEYWORD]->(:Keyword {name: 'neural networks'}) RETURN c.specifications, count(a) as ArticlesCount ORDER BY ArticlesCount DESC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which categories have the most articles with comments?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article {comments: NOT NULL})-[:HAS_CATEGORY]->(c:Categories) RETURN c.specifications, count(a) AS CommentedArticles ORDER BY CommentedArticles DESC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What categories are most articles with DOI starting with '10.1001' classified into?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_CATEGORY]->(c:Categories)<-[:HAS_DOI]-(d:DOI) WHERE d.name STARTS WITH '10.1001' RETURN DISTINCT c.specifications"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you show me the categories of articles written by authors from 'MIT'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_CATEGORY]->(c:Categories)<-[:WRITTEN_BY]-(au:Author {affiliation: 'MIT'}) RETURN DISTINCT c.specifications"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which categories have seen a decline in the number of published articles in the last decade?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_CATEGORY]->(c:Categories)-[:PUBLISHED_IN]->(j:Journal) WHERE j.year < date().year - 10 RETURN DISTINCT c.specifications, count(a) AS Decline ORDER BY Decline ASC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the categories of the most cited articles in your database?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (c:Categories)<-[:HAS_CATEGORY]-(a:Article) WHERE a.article_id IN [/* List of cited article IDs */] RETURN c.specifications"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How would you find the relationship between article categories and journal names?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_CATEGORY]->(c:Categories)-[:PUBLISHED_IN]->(j:Journal) RETURN c.specifications, j.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which journals have published the most articles on the topic of artificial intelligence?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_TOPIC]->(:Topic {label: 'Artificial Intelligence'})-[:PUBLISHED_IN]->(j:Journal) RETURN j.name, count(*) AS articles_count ORDER BY articles_count DESC;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you list all the journals that published articles written by the author Jane Doe?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:WRITTEN_BY]->(:Author {first_name: 'Jane', last_name: 'Doe'})-[:PUBLISHED_IN]->(j:Journal) RETURN j.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the names of journals that have at least 10 articles about quantum computing?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_KEY]->(:Keyword {name: 'Quantum Computing'})-[:PUBLISHED_IN]->(j:Journal) WITH j, count(*) AS article_count WHERE article_count >= 10 RETURN j.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Show me the top 5 journals based on the number of articles published in the year 2020?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:PUBLISHED_IN]->(j:Journal) WHERE a.year = 2020 WITH j, count(*) AS articles_count RETURN j.name ORDER BY articles_count DESC LIMIT 5;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many articles on the topic of machine learning were published in the 'Journal of Data Science'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_TOPIC]->(:Topic {label: 'Machine Learning'})-[:PUBLISHED_IN]->(j:Journal {name: 'Journal of Data Science'}) RETURN count(a) AS article_count;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the journals that have published articles with more than 50 pages?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:PUBLISHED_IN {pages: p}]->(j:Journal) WHERE toInteger(p) > 50 RETURN j.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Is there a list of journals that have not published any articles since 2019?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal) WHERE NOT (j)-[:PUBLISHED_IN {year: y}]->(a:Article) WHERE y > 2019 RETURN j.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Could you provide a list of journals that have published articles by authors from 'MIT' affiliation?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:WRITTEN_BY]->(:Author {affiliation: 'MIT'})-[:PUBLISHED_IN]->(j:Journal) RETURN DISTINCT j.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which journal has the highest number of articles about cybersecurity?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_TOPIC]->(:Topic {label: 'Cybersecurity'})-[:PUBLISHED_IN]->(j:Journal) WITH j, count(a) AS articles_count ORDER BY articles_count DESC LIMIT 1 RETURN j.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the average number of pages for articles published in the 'International Journal of Computer Science'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:PUBLISHED_IN {pages: p}]->(j:Journal {name: 'International Journal of Computer Science'}) RETURN avg(toInteger(p)) AS average_pages;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you show the most recent publication for each journal?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)-[:PUBLISHED_IN]->(a:Article)-[:UPDATED]->(u:UpdateDate) RETURN j.name, max(u.update_date) AS latest_update;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What journals have published articles related to 'Graph Theory' that have received updates in 2021?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_TOPIC]->(:Topic {label: 'Graph Theory'})-[:UPDATED {update_date: '2021'}]->(ud:UpdateDate)-[:PUBLISHED_IN]->(j:Journal) RETURN j.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there any journals that focus only on the 'Biology' category?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)-[:PUBLISHED_IN]->(a:Article)-[:HAS_CATEGORY]->(:Categories {specifications: 'Biology'}) RETURN j.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which journals have published articles with the keyword 'Neural Networks' the most?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword {name: 'Neural Networks'})-[:HAS_KEY]->(a:Article)-[:PUBLISHED_IN]->(j:Journal) RETURN j.name, count(a) ORDER BY count(a) DESC;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you list the journals that have published reports with the report number 'RPT-2022-05'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)-[:PUBLISHED_IN]->(a:Article)-[:HAS_REPORT]->(:Report {report_no: 'RPT-2022-05'}) RETURN j.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Do any journals stand out in terms of publishing articles with extensive abstracts (more than 200 words)?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)-[:PUBLISHED_IN]->(a:Article) WHERE length(a.abstract) > 200 RETURN j.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the journals that had their first publication about 'Climate Change' in the last 5 years?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)-[:PUBLISHED_IN]->(a:Article)-[:HAS_TOPIC]->(:Topic {label: 'Climate Change'}) WHERE a.year >= (date().year - 5) RETURN j.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you find journals where the majority of their articles are co-authored by more than 3 authors?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:PUBLISHED_IN]->(j:Journal) WHERE size((a)-[:WRITTEN_BY]->(:Author)) > 3 RETURN j.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there journals that predominantly publish articles from the 'Physics' category?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)-[:PUBLISHED_IN]->(a:Article)-[:HAS_CATEGORY]->(:Categories {label: 'Physics'}) RETURN j.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many journals have published articles that were last updated on '2023-01-01'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)-[:PUBLISHED_IN]->(a:Article)-[:UPDATED]->(:UpdateDate {update_date: date('2023-01-01')}) RETURN count(j) AS journals_count;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "In which journal did the article with the title 'Advances in Distributed Computing' appear?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)-[:PUBLISHED_IN]->(a:Article {title: 'Advances in Distributed Computing'}) RETURN j.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Could you identify journals that have not published any articles related to the 'Healthcare' keyword?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal) WHERE NOT (j)-[:PUBLISHED_IN]->(:Article)-[:HAS_KEY]->(:Keyword {name: 'Healthcare'}) RETURN j.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the journal names that published the most articles in the 'Economics' specification category?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)-[:PUBLISHED_IN]->(a:Article)-[:HAS_CATEGORY]->(c:Categories {specifications: 'Economics'}) RETURN j.name, count(a) ORDER BY count(a) DESC;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there any journals known for publishing short articles (less than 10 pages)?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)-[:PUBLISHED_IN]->(a:Article {pages: p}) WHERE toInteger(p) < 10 RETURN j.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can we see a distribution of the number of articles per journal in a specific cluster of topics, like 'Cluster 42'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)-[:PUBLISHED_IN]->(a:Article)-[:HAS_TOPIC]->(t:Topic {cluster: 42}) RETURN j.name, count(a) AS articles_count ORDER BY articles_count DESC;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the relationship between journals and the 'Machine Learning' topic in terms of article count?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (t:Topic {label: 'Machine Learning'})-[:HAS_TOPIC]->(a:Article)-[:PUBLISHED_IN]->(j:Journal) RETURN j.name, count(a) AS article_count ORDER BY article_count DESC;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Do we have a list of journals that frequently collaborate with 'Harvard University' authors?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)-[:PUBLISHED_IN]->(a:Article)-[:WRITTEN_BY]->(:Author {affiliation: 'Harvard University'}) RETURN j.name, count(a) AS articles_count ORDER BY articles_count DESC;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there journals that have a high frequency of DOI named '10.1000/xyz123'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)-[:PUBLISHED_IN]->(a:Article)-[:HAS_DOI]->(:DOI {name: '10.1000/xyz123'}) RETURN j.name, count(a) AS count;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which journals primarily publish content with the 'Technology' label?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)-[:PUBLISHED_IN]->(a:Article)-[:HAS_TOPIC]->(:Topic {label: 'Technology'}) RETURN j.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you provide a count of the articles published by 'Nature' journal in the last decade?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal {name: 'Nature'})-[:PUBLISHED_IN]->(a:Article) WHERE a.year >= (date().year - 10) RETURN count(a) AS articles_count;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Have any journals focused exclusively on articles with the keyword 'Blockchain'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)-[:PUBLISHED_IN]->(a:Article)-[:HAS_KEY]->(:Keyword {name: 'Blockchain'}) RETURN j.name, count(a) AS articles_count;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the journals that have articles written by an author with the last name 'Smith'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)-[:PUBLISHED_IN]->(a:Article)-[:WRITTEN_BY]->(:Author {last_name: 'Smith'}) RETURN j.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Do journals that publish more frequent updates have a higher number of articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)-[:PUBLISHED_IN]->(a:Article) WHERE size((a)-[:UPDATED]->(:UpdateDate)) > 1 RETURN j.name, count(a) AS articles_count;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you display journals that have an average of more than 5 articles per author?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)-[:PUBLISHED_IN]->(a:Article)-[:WRITTEN_BY]->(auth:Author) WITH j, auth, count(DISTINCT a) AS article_count RETURN j.name, avg(article_count) AS average_articles ORDER BY average_articles DESC;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the most common journal for articles that have the 'Epidemiology' keyword?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword {name: 'Epidemiology'})-[:HAS_KEY]->(a:Article)-[:PUBLISHED_IN]->(j:Journal) RETURN j.name, count(a) ORDER BY count(a) DESC LIMIT 1;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which journals have a significant number of articles without any report associated?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)-[:PUBLISHED_IN]->(a:Article) WHERE NOT (a)-[:HAS_REPORT]->(:Report) RETURN j.name, count(a) AS articles_count;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What journals are associated with articles that have been updated more than twice?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)-[:PUBLISHED_IN]->(a:Article) WHERE size((a)-[:UPDATED]->(:UpdateDate)) > 2 RETURN j.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you find the journal with the longest track record (earliest year) of publishing in the 'Astronomy' topic?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)-[:PUBLISHED_IN]->(a:Article)-[:HAS_TOPIC]->(:Topic {label: 'Astronomy'}) RETURN j.name, min(a.year) AS first_publication_year ORDER BY first_publication_year;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which journals have published articles that have keywords associated with more than three different topics?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)-[:PUBLISHED_IN]->(a:Article)-[:HAS_KEY]->(:Keyword)-[:HAS_TOPIC]->(t:Topic) WITH j, COUNT(DISTINCT t) AS topic_count WHERE topic_count > 3 RETURN j.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there any journals that published articles on both the 'Genetics' and 'Biotechnology' categories?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)-[:PUBLISHED_IN]->(a:Article)-[:HAS_CATEGORY]->(c1:Categories), (a)-[:HAS_CATEGORY]->(c2:Categories) WHERE c1.label = 'Genetics' AND c2.label = 'Biotechnology' RETURN DISTINCT j.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the title of the article with article_id 123?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article {article_id: 123}) RETURN a.title;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you provide the abstract and comments for article_id 456?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article {article_id: 456}) RETURN a.abstract, a.comments;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Is there an article with the title 'Graph Databases and Neo4j'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article {title: 'Graph Databases and Neo4j'}) RETURN a.article_id;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many articles were written by the author with last_name 'Smith'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:WRITTEN_BY]->(aut:Author {last_name: 'Smith'}) RETURN COUNT(a);"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Who are the authors of the article titled 'A Study on Graph Patterns'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article {title: 'A Study on Graph Patterns'})-[:WRITTEN_BY]->(aut:Author) RETURN aut.first_name, aut.last_name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which journal published the article 'Cypher Query Language'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article {title: 'Cypher Query Language'})-[:PUBLISHED_IN]->(j:Journal) RETURN j.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the keywords associated with the article titled 'Neo4j Performance Tuning'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article {title: 'Neo4j Performance Tuning'})-[:HAS_KEY]->(k:Keyword) RETURN k.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What report is linked to the article with article_id 789?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article {article_id: 789})-[:HAS_REPORT]->(r:Report) RETURN r.report_no;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What comments have been made on the article with the abstract containing 'graph theory'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article) WHERE a.abstract CONTAINS 'graph theory' RETURN a.comments;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the publication year of the article written by 'Doe, John' on 'Graph Algorithms'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article {title: 'Graph Algorithms'})-[:PUBLISHED_IN]->(:Journal)-[:PUBLISHED_IN {year: y}]->(a) RETURN y;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the specifications of the category for the article with 'Graph Partitioning' in the title?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_CATEGORY]->(cat:Categories) WHERE a.title CONTAINS 'Graph Partitioning' RETURN cat.specifications;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you display the titles of all articles with more than 100 comments?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article) WHERE TOINT(a.comments) > 100 RETURN a.title;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the names of the journals that have published articles on 'Graph Visualization'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_KEY]->(:Keyword {name: 'Graph Visualization'})-[:PUBLISHED_IN]->(j:Journal) RETURN DISTINCT j.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many articles have been written by authors affiliated with 'Stanford University'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:WRITTEN_BY]->(:Author {affiliation: 'Stanford University'}) RETURN COUNT(a);"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you find the number of topics associated with a keyword named 'Neo4j'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Keyword {name: 'Neo4j'})-[:HAS_TOPIC]->(t:Topic) RETURN COUNT(t);"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the cluster number of the topic labeled 'Distributed Systems' associated with any keyword?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Keyword)-[:HAS_TOPIC]->(t:Topic {label: 'Distributed Systems'}) RETURN t.cluster;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "List all article titles that have been assigned the report number 'RPT-20230102'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_REPORT]->(:Report {report_no: 'RPT-20230102'}) RETURN a.title;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which articles have an abstract that mentions 'Cypher query optimization'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article) WHERE a.abstract CONTAINS 'Cypher query optimization' RETURN a.title;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you show me the number of pages for the article titled 'Optimizing Graph Queries'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article {title: 'Optimizing Graph Queries'})-[:PUBLISHED_IN]->(:Journal)-[:PUBLISHED_IN {pages: p}]->(a) RETURN p;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the titles of articles in the Journal of Graph Theory? ", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:PUBLISHED_IN]->(:Journal {name: 'Journal of Graph Theory'}) RETURN a.title;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the publication year of the article titled 'Introduction to Graphs'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article {title: 'Introduction to Graphs'})-[:PUBLISHED_IN {year: y}]->(:Journal) RETURN y;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the latest update date of the article 'Understanding Neo4j'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article {title: 'Understanding Neo4j'})-[:UPDATED]->(upd:UpdateDate) RETURN upd.update_date ORDER BY upd.update_date DESC LIMIT 1;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you list the articles that belong to the 'Graph Database' category?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_CATEGORY]->(cat:Categories {specifications: 'Graph Database'}) RETURN a.title;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many articles from the 'Computer Science' category were updated on '2023-01-01'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(upd:UpdateDate {update_date: DATE('2023-01-01')})-[:HAS_CATEGORY]->(cat:Categories {specifications: 'Computer Science'}) RETURN COUNT(a);"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the DOIs of the articles published in 'Nature' in 2022?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:PUBLISHED_IN]->(:Journal {name: 'Nature'})-[:PUBLISHED_IN {year: 2022}]->(doi:DOI) RETURN doi.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which articles have 'Machine Learning' as a topic?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)-[:HAS_TOPIC]->(:Topic {label: 'Machine Learning'})<-[:HAS_KEY]-(a:Article) RETURN a.title;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the list of affiliations of all authors of the article 'Data Science in Neo4j'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article {title: 'Data Science in Neo4j'})-[:WRITTEN_BY]->(aut:Author) RETURN aut.affiliation;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which reports are associated with articles containing the word 'Benchmark' in their abstract?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_REPORT]->(r:Report) WHERE a.abstract CONTAINS 'Benchmark' RETURN r.report_id;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there any articles related to the keyword 'NoSQL Databases' from before 2015?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_KEY]->(:Keyword {name: 'NoSQL Databases'})-[:PUBLISHED_IN {year: y}]->(:Journal) WHERE y < 2015 RETURN a.title;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you find articles that have been updated more than once?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(upd:UpdateDate) WITH a, COUNT(upd) AS updates WHERE updates > 1 RETURN a.title, updates;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the most common keyword used in the articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)<-[:HAS_KEY]-(a:Article) RETURN k.name, count(a) AS usage ORDER BY usage DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which keywords are linked to the highest number of different topics?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)-[:HAS_TOPIC]->(t:Topic) RETURN k.name, count(DISTINCT t) AS topicCount ORDER BY topicCount DESC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many articles share the same keyword as the given article with ID 123?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a1:Article {article_id: 123})-[:HAS_KEY]->(k:Keyword)<-[:HAS_KEY]-(a2:Article) RETURN count(DISTINCT a2) AS sharedArticles"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you list all the keywords that have been associated with a specific topic labeled 'Neuroscience'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)-[:HAS_TOPIC]->(t:Topic {label: 'Neuroscience'}) RETURN k.name ORDER BY k.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What keywords do not have an assigned topic yet?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword) WHERE NOT EXISTS ((k)-[:HAS_TOPIC]->()) RETURN k.name ORDER BY k.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the top five keywords with the most associated articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)<-[:HAS_KEY]-(a:Article) RETURN k.name, count(a) AS articleCount ORDER BY articleCount DESC LIMIT 5"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many unique keywords are linked to each topic cluster?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)-[:HAS_TOPIC]->(t:Topic) RETURN t.cluster, count(DISTINCT k) AS keywordCount ORDER BY keywordCount DESC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which article titles contain the keyword with key_id 'K123'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Keyword {key_id: 'K123'})<-[:HAS_KEY]-(a:Article) RETURN a.title ORDER BY a.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the total number of distinct keywords found in the entire database?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword) RETURN count(DISTINCT k) AS totalKeywords"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there any keywords that appear in articles from before the year 2000?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)<-[:HAS_KEY]-(a:Article)-[p:PUBLISHED_IN]->() WHERE p.year < 2000 RETURN DISTINCT k.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which keywords are most frequently associated with the 'Medicine' category?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)<-[:HAS_KEY]-(a:Article)-[:HAS_CATEGORY]->(c:Categories {specifications: 'Medicine'}) RETURN k.name, count(a) AS freq ORDER BY freq DESC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What keywords have never been updated after they were first published?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)<-[:HAS_KEY]-(a:Article) WHERE NOT EXISTS ((a)-[:UPDATED]->()) RETURN k.name ORDER BY k.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which keyword is connected to the topic with the longest description?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)-[:HAS_TOPIC]->(t:Topic) RETURN k.name, t.description ORDER BY length(t.description) DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you find any articles with keywords that have no DOIs?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)<-[:HAS_KEY]-(a:Article) WHERE NOT EXISTS ((a)-[:HAS_DOI]->()) RETURN a.article_id, a.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the connections between keywords and authors, specifically which keywords are used by the most prolific authors?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)<-[:HAS_KEY]-(a:Article)-[:WRITTEN_BY]->(au:Author) RETURN k.name, au.author_id, count(a) AS articles ORDER BY articles DESC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you group articles based on their shared keywords and list them?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)<-[:HAS_KEY]-(a:Article) RETURN k.name, collect(a.title) AS articles GROUP BY k.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many articles related to the keyword 'Climate Change' were updated in 2021?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword {name: 'Climate Change'})<-[:HAS_KEY]-(a:Article)-[:UPDATED]->(u:UpdateDate) WHERE u.update_date.year = 2021 RETURN count(a) AS updates"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the average number of keywords per article?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_KEY]->(k:Keyword) WITH a, count(k) AS numKeywords RETURN avg(numKeywords) AS averageKeywords"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which topics are associated with keywords that are mostly found in a single article?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)-[:HAS_TOPIC]->(t:Topic)<-[:HAS_TOPIC]-(k2:Keyword)<-[:HAS_KEY]-(a:Article) WITH t, k, count(a) AS articles WHERE articles = 1 RETURN t.label, collect(k.name) AS singleUseKeywords"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the distribution of articles per keyword?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)<-[:HAS_KEY]-(a:Article) RETURN k.name, count(a) AS articleCount ORDER BY articleCount"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you show me a list of all topics without any associated keywords?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (t:Topic) WHERE NOT EXISTS ((:Keyword)-[:HAS_TOPIC]->(t)) RETURN t.label"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the different keywords that have been used to write reports?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)<-[:HAS_KEY]-(a:Article)-[:HAS_REPORT]->(r:Report) RETURN DISTINCT k.name ORDER BY k.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which keyword has the widest range of publication years?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)<-[:HAS_KEY]-(a:Article)-[p:PUBLISHED_IN]->() WITH k, max(p.year) - min(p.year) AS range RETURN k.name, range ORDER BY range DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there keywords that are exclusive to a single journal?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)<-[:HAS_KEY]-(a:Article)-[:PUBLISHED_IN]->(j:Journal) WITH k, j, count(DISTINCT a) AS articles WHERE articles = 1 RETURN DISTINCT k.name, j.name ORDER BY j.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many articles discussing 'Global Warming' were published without any report?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword {name: 'Global Warming'})<-[:HAS_KEY]-(a:Article) WHERE NOT EXISTS ((a)-[:HAS_REPORT]->()) RETURN count(a) AS articles"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you identify the longest shared chain of keywords to topics?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH p=(k:Keyword)-[:HAS_TOPIC]->(t:Topic) RETURN k.name, t.label, length(p) AS pathLength ORDER BY pathLength DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the total count of articles for each keyword within the 'Health' category?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)<-[:HAS_KEY]-(a:Article)-[:HAS_CATEGORY]->(c:Categories {specifications: 'Health'}) RETURN k.name, count(DISTINCT a) AS articleCount"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What keyword was most recently associated with an article for the first time?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)<-[:HAS_KEY]-(a:Article)-[:UPDATED]->(ud:UpdateDate) WITH k, min(ud.update_date) AS firstUseDate ORDER BY firstUseDate DESC LIMIT 1 RETURN k.name, firstUseDate"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there any clusters where all associated topics have at least one keyword in common?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (t1:Topic)-[:HAS_TOPIC]->(k:Keyword)<-[:HAS_TOPIC]-(t2:Topic) WHERE t1.cluster = t2.cluster AND id(t1) <> id(t2) RETURN t1.cluster, collect(DISTINCT k.name) AS commonKeywords"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the top three most frequent combinations of two keywords occurring together in the same article?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k1:Keyword)<-[:HAS_KEY]-(a:Article)-[:HAS_KEY]->(k2:Keyword) WHERE id(k1) < id(k2) RETURN k1.name, k2.name, count(a) AS cooccurrences ORDER BY cooccurrences DESC LIMIT 3"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which keywords have been used consistently every year since their first mention?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)<-[:HAS_KEY]-(a:Article)-[p:PUBLISHED_IN]->() WITH k, collect(DISTINCT p.year) AS years WITH k, years, range(min(years), max(years)) AS allYears WHERE allYears = years RETURN k.name ORDER BY size(years) DESC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you show the articles that were the last to feature keywords which are now obsolete?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)<-[:HAS_KEY]-(a:Article)-[p:PUBLISHED_IN]->() WITH k, a.title AS title, max(p.year) AS lastYear ORDER BY lastYear LIMIT 5 RETURN k.name, title, lastYear"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the least common keyword found in articles about 'Data Science'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)<-[:HAS_KEY]-(a:Article)-[:HAS_CATEGORY]->(c:Categories {specifications: 'Data Science'}) RETURN k.name, count(a) AS frequency ORDER BY frequency ASC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How can I find the total number of distinct authors that have written about each keyword?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)<-[:HAS_KEY]-(a:Article)-[:WRITTEN_BY]->(au:Author) RETURN k.name, count(DISTINCT au) AS authorCount ORDER BY authorCount DESC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which keywords are associated with the longest articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)<-[:HAS_KEY]-(a:Article)-[p:PUBLISHED_IN]->() WITH k, a, max(length(p.pages)) AS longestArticle RETURN k.name, a.title, longestArticle ORDER BY longestArticle DESC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What topics have the most keywords associated with them for the articles from the most recent year?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)-[:HAS_TOPIC]->(t:Topic)<-[:HAS_TOPIC]-(k2:Keyword)<-[:HAS_KEY]-(a:Article)-[p:PUBLISHED_IN]->() WITH t, max(p.year) AS latestYear, count(DISTINCT k) AS keywordCount WHERE latestYear = max(p.year) RETURN t.label, keywordCount ORDER BY keywordCount DESC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many different authors' articles include the keyword 'Economics'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword {name: 'Economics'})<-[:HAS_KEY]-(a:Article)-[:WRITTEN_BY]->(au:Author) RETURN count(DISTINCT au) AS distinctAuthors"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can we list all articles and their associated keywords for a given Author with author_id 'AU456'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (au:Author {author_id: 'AU456'})<-[:WRITTEN_BY]-(a:Article)-[:HAS_KEY]->(k:Keyword) RETURN a.title, collect(k.name) AS keywords"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Is there a keyword that ranks first both in terms of article count and topic count?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)<-[:HAS_KEY]-(a:Article) WITH k, count(a) AS articles MATCH (k)-[:HAS_TOPIC]->(t:Topic) RETURN k.name, articles, count(t) AS topics ORDER BY articles DESC, topics DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you show me all topics related to the keyword 'Machine Learning'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Keyword {name: 'Machine Learning'})-[:HAS_TOPIC]->(topic:Topic) RETURN topic;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the descriptions for topics linked to the keyword 'Artificial Intelligence'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Keyword {name: 'Artificial Intelligence'})-[:HAS_TOPIC]->(topic:Topic) RETURN topic.description;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many topics are connected to the keyword 'Neural Networks'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Keyword {name: 'Neural Networks'})-[:HAS_TOPIC]->(topic:Topic) RETURN COUNT(topic);"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "List all clusters that include the keyword 'Deep Learning'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Keyword {name: 'Deep Learning'})-[:HAS_TOPIC]->(topic:Topic) RETURN topic.cluster;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "For the keyword 'Data Mining', what are the labels of the associated topics?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Keyword {name: 'Data Mining'})-[:HAS_TOPIC]->(topic:Topic) RETURN topic.label;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which topics related to 'Cloud Computing' have been most frequently listed?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Keyword {name: 'Cloud Computing'})-[:HAS_TOPIC]->(topic:Topic) RETURN topic, COUNT(*) AS Frequency ORDER BY Frequency DESC;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you identify the range of clusters for topics linked to 'Big Data'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Keyword {name: 'Big Data'})-[:HAS_TOPIC]->(topic:Topic) RETURN MIN(topic.cluster), MAX(topic.cluster);"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Give me the titles of the articles that discuss topics under 'Internet of Things'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_KEY]->(:Keyword {name: 'Internet of Things'})-[:HAS_TOPIC]->(t:Topic) RETURN a.title;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which authors have written on topics associated with 'Blockchain'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Keyword {name: 'Blockchain'})-[:HAS_TOPIC]->(:Topic)<-[:HAS_KEY]-(a:Article)-[:WRITTEN_BY]->(author:Author) RETURN DISTINCT author;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Show me all topic descriptions that have a cluster number of 5.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (topic:Topic {cluster: 5}) RETURN topic.description;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you find topics that are related to both 'Cryptography' and 'Security'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k1:Keyword {name: 'Cryptography'})-[:HAS_TOPIC]->(t:Topic)<-[:HAS_TOPIC]-(k2:Keyword {name: 'Security'}) RETURN DISTINCT t;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How are topics labeled for the keyword 'Robotics'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Keyword {name: 'Robotics'})-[:HAS_TOPIC]->(topic:Topic) RETURN topic.label;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Reveal the clusters that relate to both 'Quantum Computing' and 'Computational Theory'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Keyword {name: 'Quantum Computing'})-[:HAS_TOPIC]->(topic:Topic)<-[:HAS_TOPIC]-(:Keyword {name: 'Computational Theory'}) RETURN DISTINCT topic.cluster;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the total number of unique topics found in the database?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (topic:Topic) RETURN COUNT(DISTINCT topic);"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there any common topics between the keywords 'Genetics' and 'Bioinformatics'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Keyword {name: 'Genetics'})-[:HAS_TOPIC]->(topic:Topic)<-[:HAS_TOPIC]-(:Keyword {name: 'Bioinformatics'}) RETURN COUNT(DISTINCT topic) > 0 AS CommonTopicsExist;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which topic clusters are most populated with related keywords?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Keyword)-[:HAS_TOPIC]->(topic:Topic) RETURN topic.cluster, COUNT(*) AS KeywordCount ORDER BY KeywordCount DESC;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Show the relationship between keywords and their respective topic clusters for 'Autonomous Vehicles'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Keyword {name: 'Autonomous Vehicles'})-[:HAS_TOPIC]->(topic:Topic) RETURN topic.cluster, COLLECT(topic.label);"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What's the total count of topics linked to the keyword 'Renewable Energy'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Keyword {name: 'Renewable Energy'})-[:HAS_TOPIC]->(topic:Topic) RETURN COUNT(topic);"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "List all topic labels for keyword 'Sustainability'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Keyword {name: 'Sustainability'})-[:HAS_TOPIC]->(topic:Topic) RETURN topic.label;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you get me the cluster numbers for topics without any associated keywords?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (topic:Topic) WHERE NOT (:Keyword)-[:HAS_TOPIC]->(topic) RETURN topic.cluster;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How can we find the descriptions of the least common topics by cluster number?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Keyword)-[:HAS_TOPIC]-(topic:Topic) WITH topic.cluster AS Cluster, COUNT(*) AS Count ORDER BY Count ASC LIMIT 1 MATCH (t:Topic {cluster: Cluster}) RETURN t.description;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which topic labels are connected to the most number of keywords?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Keyword)-[:HAS_TOPIC]->(topic:Topic) RETURN topic.label, COUNT(*) AS KeywordsConnected ORDER BY KeywordsConnected DESC LIMIT 1;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Find all keywords that are linked to the topic with label 'Cybersecurity'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Topic {label:'Cybersecurity'})<-[:HAS_TOPIC]-(keyword:Keyword) RETURN keyword.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there any articles related to a topic from cluster 2?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Topic {cluster: 2})<-[:HAS_TOPIC]-(:Keyword)<-[:HAS_KEY]-(article:Article) RETURN COUNT(DISTINCT article) > 0 AS ArticlesExist;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many different clusters are represented in the database?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (topic:Topic) RETURN COUNT(DISTINCT topic.cluster);"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the average number of topics per cluster?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (topic:Topic) RETURN AVG(SIZE((:Keyword)-[:HAS_TOPIC]->(topic)));"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you list all authors who have written articles about topics in cluster 10?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Topic {cluster: 10})<-[:HAS_TOPIC]-(:Keyword)<-[:HAS_KEY]-(a:Article)-[:WRITTEN_BY]->(author:Author) RETURN DISTINCT author;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What can you tell me about the topics that have no description but are in cluster 3?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (topic:Topic {cluster: 3}) WHERE topic.description IS NULL RETURN topic;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can we see a list of all topics with their cluster numbers ordered by their cluster size?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (topic:Topic) WITH topic.cluster AS Cluster, COUNT(topic) AS Size ORDER BY Size DESC MATCH (t:Topic {cluster: Cluster}) RETURN t.label, Cluster;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Find all articles that are associated with topics that don't have a description.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (article:Article)-[:HAS_KEY]->(:Keyword)-[:HAS_TOPIC]->(topic:Topic) WHERE topic.description IS NULL RETURN article.title;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What topics are in the same cluster as the 'Quantum Mechanics' keyword?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Keyword {name: 'Quantum Mechanics'})-[:HAS_TOPIC]->(topic1:Topic)<-[:HAS_TOPIC]-(topic2:Topic) RETURN DISTINCT topic2;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How can you find topics that are not linked to any keywords?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (topic:Topic) WHERE NOT (topic)<-[:HAS_TOPIC]-(:Keyword) RETURN topic;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which cluster contains the most diverse set of topics?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Keyword)-[:HAS_TOPIC]->(topic:Topic) WITH topic.cluster AS Cluster GROUP BY Cluster RETURN Cluster ORDER BY COUNT(DISTINCT topic.label) DESC LIMIT 1;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can I see all topic descriptions under the cluster labeled 'Genomics'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Topic {label: 'Genomics'})-[:HAS_TOPIC]->(topic:Topic) RETURN topic.description;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Show me the most frequently occurring topic clusters in the articles.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_KEY]->(:Keyword)-[:HAS_TOPIC]->(topic:Topic) RETURN topic.cluster, COUNT(*) AS Occurrences ORDER BY Occurrences DESC;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Is there a topic that is associated with the maximum number of keywords in the database?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Keyword)-[:HAS_TOPIC]->(topic:Topic) WITH topic, COUNT(*) AS KeywordsLinked RETURN topic ORDER BY KeywordsLinked DESC LIMIT 1;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "List all distinct topic clusters.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (topic:Topic) RETURN DISTINCT topic.cluster;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you determine the topic with the longest description?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (topic:Topic) RETURN topic ORDER BY LENGTH(topic.description) DESC LIMIT 1;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which keyword is associated with the topic labeled 'Distributed Systems'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Topic {label: 'Distributed Systems'})<-[:HAS_TOPIC]-(keyword:Keyword) RETURN keyword.name;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the distribution of topics across different clusters?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (topic:Topic) WITH topic.cluster AS Cluster, COUNT(*) AS Count ORDER BY Cluster RETURN Cluster, Count;"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you find the titles of all articles with a DOI that includes the string '2023'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(d:DOI) WHERE d.name CONTAINS '2023' RETURN a.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the names of DOIs for articles authored by 'John Smith'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI), (a)-[:WRITTEN_BY]->(aut:Author) WHERE aut.first_name = 'John' AND aut.last_name = 'Smith' RETURN doi.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which articles with the DOI beginning with '10.1000' were published in 2021?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI), (a)-[:PUBLISHED_IN]->(p) WHERE doi.name STARTS WITH '10.1000' AND p.year = 2021 RETURN a.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there any articles related to the DOI '10.1016/j.astropartphys.2021.102581'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI) WHERE doi.name = '10.1016/j.astropartphys.2021.102581' RETURN a.article_id, a.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Show me the most recent articles that have a DOI ending with '00001'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI), (a)-[:UPDATED]->(upd:UpdateDate) WHERE doi.name ENDS WITH '00001' RETURN a.title, upd.update_date ORDER BY upd.update_date DESC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Do we have a full list of DOIs for all articles in the 'Quantum Physics' category?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI), (a)-[:HAS_CATEGORY]->(c:Categories {specifications: 'Quantum Physics'}) RETURN doi.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the abstracts of articles with DOIs including the term 'neural'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI) WHERE toLower(doi.name) CONTAINS 'neural' RETURN a.abstract"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you provide article titles and their respective DOIs for those DOIs registered with ID 'DOI12345'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI {doi_id: 'DOI12345'}) RETURN a.title, doi.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "List the authors of articles with a DOI number featuring the substring 'biochem'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI), (a)-[:WRITTEN_BY]->(aut:Author) WHERE doi.name CONTAINS 'biochem' RETURN aut.first_name, aut.last_name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Show the count of articles for each DOI we have in our database.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI) RETURN doi.name, count(a) AS article_count"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the DOIs of articles with more than 100 comments?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI) WHERE toInteger(a.comments) > 100 RETURN doi.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "I need to see all articles' titles linked to any DOI that has 'IEEE' in its name.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI) WHERE toLower(doi.name) CONTAINS 'ieee' RETURN a.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Discover the article IDs and DOIs for the journals named 'Science'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI), (a)-[:PUBLISHED_IN]->(j:Journal {name: 'Science'}) RETURN a.article_id, doi.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Identify the titles of articles that are linked to the oldest DOIs in our records.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI) RETURN a.title, doi.name ORDER BY doi.doi_id ASC LIMIT 10"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Compile a list of DOIs and affiliated journals for articles that contain the keyword 'Mars'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword {name: 'Mars'})-[:HAS_KEY]->(a:Article)-[:HAS_DOI]->(doi:DOI), (a)-[:PUBLISHED_IN]->(j:Journal) RETURN doi.name, j.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which DOIs correspond to articles with the report number 'RPT-2023-01'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI), (a)-[:HAS_REPORT]->(r:Report {report_no: 'RPT-2023-01'}) RETURN a.title, doi.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you determine the number of articles with a given DOI '10.1111/XXXXX'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI {name: '10.1111/XXXXX'}) RETURN count(a) AS article_count"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Identify articles written by 'Emily White' with DOIs assigned in 2020.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI), (a)-[:WRITTEN_BY]->(aut:Author), (a)-[:PUBLISHED_IN]->(p) WHERE aut.first_name = 'Emily' AND aut.last_name = 'White' AND p.year = 2020 RETURN a.title, doi.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many DOIs are associated with articles updated in the last month?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI), (a)-[:UPDATED]->(upd:UpdateDate) WHERE upd.update_date >= date('2023-03-01') RETURN count(doi) AS recent_doi_count"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "List the DOIs for articles whose titles mention 'Climate Change.'", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI) WHERE toLower(a.title) CONTAINS 'climate change' RETURN doi.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the affiliations of authors who have published articles with a given DOI '10.5555/al.s2.3'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI {name: '10.5555/al.s2.3'}), (a)-[:WRITTEN_BY]->(aut:Author) RETURN aut.affiliation"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there any articles having the same DOI but with different titles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI) WITH doi.name AS doiName, collect(a.title) AS titles WHERE size(titles) > 1 RETURN doiName, titles"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Show me the last ten DOIs assigned to articles in our database.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI) RETURN doi.name ORDER BY doi.doi_id DESC LIMIT 10"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can we extract the abstracts from articles that contain the DOI pattern '10.1234/xyz'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI) WHERE doi.name CONTAINS '10.1234/xyz' RETURN a.abstract"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Determine if there are any articles without a DOI?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article) WHERE NOT EXISTS ((a)-[:HAS_DOI]->()) RETURN a.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can we get the article titles along with their DOIs for articles written by authors with affiliation 'MIT'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI), (a)-[:WRITTEN_BY]->(aut:Author {affiliation: 'MIT'}) RETURN a.title, doi.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many articles for each year are associated with DOIs that include the term 'quantum'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI), (a)-[:PUBLISHED_IN]->(p) WHERE toLower(doi.name) CONTAINS 'quantum' RETURN p.year, count(a) AS articles_per_year"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Could you list the DOIs of all articles that have been published in the 'Nature' journal?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal {name: 'Nature'})<-[:PUBLISHED_IN]-(a:Article)-[:HAS_DOI]->(doi:DOI) RETURN a.title, doi.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the time span between the oldest and the newest DOI in our database?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (doi:DOI) WITH min(doi.doi_id) AS oldestDOI, max(doi.doi_id) AS newestDOI RETURN oldestDOI, newestDOI"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Identify articles with a DOI '10.1093/acprof' and list their associated reports.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI {name: '10.1093/acprof'}), (a)-[:HAS_REPORT]->(r:Report) RETURN a.title, r.report_no"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can we find the names of all authors who have an article linked to a specific DOI '10.1117/12.892762'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI {name: '10.1117/12.892762'}), (a)-[:WRITTEN_BY]->(aut:Author) RETURN aut.first_name, aut.last_name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "List all the articles, along with their update date, that have a DOI containing 'bioinfo' in it.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI)-[:UPDATED]->(upd:UpdateDate) WHERE doi.name CONTAINS 'bioinfo' RETURN a.title, upd.update_date"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which authors first published an article with a DOI in 2019?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI), (a)-[:PUBLISHED_IN]->(p), (a)-[:WRITTEN_BY]->(aut:Author) WHERE p.year = 2019 RETURN DISTINCT aut.first_name, aut.last_name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there any DOIs linked to articles that were updated more than once?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI), (a)-[:UPDATED]->(upd:UpdateDate) WITH a, doi, COUNT(upd) AS updates WHERE updates > 1 RETURN a.title, doi.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "List all the categories for the articles that have a DOI with 'med' in it.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_CATEGORY]->(c:Categories), (a)-[:HAS_DOI]->(doi:DOI) WHERE doi.name CONTAINS 'med' RETURN c.specifications"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the corresponding DOIs for articles that discuss the topic labeled 'Artificial Intelligence'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (t:Topic {label: 'Artificial Intelligence'})<-[:HAS_TOPIC]-(k:Keyword)<-[:HAS_KEY]-(a:Article)-[:HAS_DOI]->(doi:DOI) RETURN a.article_id, doi.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can we retrieve all journal names along with the DOIs of the articles published in them?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)<-[:PUBLISHED_IN]-(a:Article)-[:HAS_DOI]->(doi:DOI) RETURN j.name, collect(doi.name) AS dois"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Count the number of articles with DOIs issued by 'Springer'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI) WHERE toLower(doi.name) CONTAINS 'springer' RETURN count(a) AS springer_article_count"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Show the article IDs and DOIs for articles updated on '2023-01-01'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI), (a)-[:UPDATED]->(upd:UpdateDate {update_date: date('2023-01-01')}) RETURN a.article_id, doi.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Find all article titles and their DOIs that have not been categorized yet.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI) WHERE NOT EXISTS ((a)-[:HAS_CATEGORY]->()) RETURN a.title, doi.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which DOIs are linked to articles that mention the keyword 'Genomics' in their abstract?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_DOI]->(doi:DOI) WHERE toLower(a.abstract) CONTAINS 'genomics' RETURN a.article_id, doi.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Who wrote the article titled 'Unlocking Quantum Potentials'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article {title: 'Unlocking Quantum Potentials'})-[:WRITTEN_BY]->(author:Author) RETURN author"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What papers has Dr. Emily Stone contributed to?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {first_name: 'Emily', last_name: 'Stone'})<-[:WRITTEN_BY]-(article:Article) RETURN article.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "List the authors who have written more than five articles.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)<-[:WRITTEN_BY]-(article:Article) WITH author, COUNT(article) AS articles_written WHERE articles_written > 5 RETURN author"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which authors are affiliated with 'Quantum Research Lab'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {affiliation: 'Quantum Research Lab'}) RETURN author.first_name, author.last_name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Find articles written by multiple authors.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (article:Article)-[:WRITTEN_BY]->(author:Author) WITH article, COUNT(author) AS num_authors WHERE num_authors > 1 RETURN article.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the titles of the articles John Doe has worked on?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {first_name: 'John', last_name: 'Doe'})<-[:WRITTEN_BY]-(article:Article) RETURN article.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you show me all articles by authors from 'Neural Networks Institute'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {affiliation: 'Neural Networks Institute'})<-[:WRITTEN_BY]-(article:Article) RETURN article"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Identify the authors who have contributed to the article ID 12345.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (article:Article {article_id: 12345})-[:WRITTEN_BY]->(author:Author) RETURN author.first_name, author.last_name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "List the co-authors of Alice Smith on her latest paper.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (alice:Author {first_name: 'Alice', last_name: 'Smith'})<-[:WRITTEN_BY]-(article:Article)-[:WRITTEN_BY]->(coAuthor:Author) WHERE NOT alice = coAuthor RETURN coAuthor"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Retrieve the number of articles each author has published.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)<-[:WRITTEN_BY]-(article:Article) RETURN author.first_name, author.last_name, COUNT(article) AS published_articles"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Find articles where John Watson and Emily Clark collaborated.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author1:Author {first_name: 'John', last_name: 'Watson'})<-[:WRITTEN_BY]-(article:Article)-[:WRITTEN_BY]->(author2:Author {first_name: 'Emily', last_name: 'Clark'}) RETURN article.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there any articles authored by someone with first name 'Leo'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {first_name: 'Leo'})<-[:WRITTEN_BY]-(article:Article) RETURN article"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Locate articles by Robert Frost, excluding those from before 2010.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {first_name: 'Robert', last_name: 'Frost'})<-[:WRITTEN_BY]-(article:Article)-[pub:PUBLISHED_IN]->() WHERE pub.year >= 2010 RETURN article.title, pub.year"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How can I find articles written by an author but not affiliated to Stanford University?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)<-[:WRITTEN_BY]-(article:Article) WHERE NOT author.affiliation = 'Stanford University' RETURN article.title, author"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Display all the authors along with the number of comments on their articles.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)<-[:WRITTEN_BY]-(article:Article) RETURN author.first_name, author.last_name, SUM(toInteger(article.comments)) AS total_comments"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Who are the authors that have an update date for their article in 2022?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)<-[:WRITTEN_BY]-(article:Article)-[:UPDATED]->(updateDate:UpdateDate) WHERE updateDate.update_date.year = 2022 RETURN author"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "List all articles by authors with the last name 'Green'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {last_name: 'Green'})<-[:WRITTEN_BY]-(article:Article) RETURN article"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which authors have published in the 'Journal of Advanced Computing'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (journal:Journal {name: 'Journal of Advanced Computing'})<-[:PUBLISHED_IN]-(article:Article)-[:WRITTEN_BY]->(author:Author) RETURN author.first_name, author.last_name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many articles has each author published in 2021?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)<-[:WRITTEN_BY]-(article:Article)-[pub:PUBLISHED_IN]->() WHERE pub.year = 2021 RETURN author.first_name, author.last_name, COUNT(article) AS articles_in_2021"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the list of articles co-authored by members of 'DeepMind'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {affiliation: 'DeepMind'})<-[:WRITTEN_BY]-(article:Article) RETURN DISTINCT article.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Reveal all articles written by first-time authors in the database.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)<-[:WRITTEN_BY]-(article:Article) WITH author, COUNT(article) AS articles_count WHERE articles_count = 1 RETURN author, article.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can I get the articles with more than 100 comments by Alice Brown?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {first_name: 'Alice', last_name: 'Brown'})<-[:WRITTEN_BY]-(article:Article) WHERE toInteger(article.comments) > 100 RETURN article.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which authors worked on the article with ID 98765?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (article:Article {article_id: 98765})-[:WRITTEN_BY]->(author:Author) RETURN author.first_name, author.last_name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Show me the articles by Katherine Johnson with an abstract mentioning 'space'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {first_name: 'Katherine', last_name: 'Johnson'})<-[:WRITTEN_BY]-(article:Article) WHERE article.abstract CONTAINS 'space' RETURN article.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Who are the authors with articles that have no keywords associated?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)-[:WRITTEN_BY]-(article:Article) WHERE NOT (article)-[:HAS_KEY]->(:Keyword) RETURN author"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can we identify the articles by 'Mary Spencer' that have been updated in the last year?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {first_name: 'Mary', last_name: 'Spencer'})<-[:WRITTEN_BY]-(article:Article)-[:UPDATED]->(updateDate:UpdateDate) WHERE updateDate.update_date >= date({year: 2022}) RETURN article.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Retrieve the most prolific author in the 'Journal of Theoretical Physics'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (journal:Journal {name: 'Journal of Theoretical Physics'})<-[:PUBLISHED_IN]-(article:Article)-[:WRITTEN_BY]->(author:Author) RETURN author, COUNT(article) AS article_count ORDER BY article_count DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "List the authors who published an article with the keyword 'Neural Networks'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (keyword:Keyword {name: 'Neural Networks'})<-[:HAS_KEY]-(article:Article)-[:WRITTEN_BY]->(author:Author) RETURN author.first_name, author.last_name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Enumerate all articles by 'Daniel Lee' that have a report attached.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {first_name: 'Daniel', last_name: 'Lee'})<-[:WRITTEN_BY]-(article:Article)-[:HAS_REPORT]->(report:Report) RETURN article.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Show me a list of articles that 'Emma Wilson' authored in 2015.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {first_name: 'Emma', last_name: 'Wilson'})<-[:WRITTEN_BY]-(article:Article)-[pub:PUBLISHED_IN]->() WHERE pub.year = 2015 RETURN article.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Who has authored the most articles without any category assigned?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)<-[:WRITTEN_BY]-(article:Article) WHERE NOT (article)-[:HAS_CATEGORY]->(:Categories) RETURN author, COUNT(article) AS article_count ORDER BY article_count DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which authors have worked on an article related to the topic 'Artificial Intelligence'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (topic:Topic {label: 'Artificial Intelligence'})<-[:HAS_TOPIC]-(:Keyword)<-[:HAS_KEY]-(article:Article)-[:WRITTEN_BY]->(author:Author) RETURN author"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you find all articles authored by people with the affiliation 'MIT' that have a report number ending with 'XZY'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {affiliation: 'MIT'})<-[:WRITTEN_BY]-(article:Article)-[:HAS_REPORT]->(report:Report) WHERE report.report_no ENDS WITH 'XZY' RETURN article.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the full names of authors who published in 'Nature' journal in the past 3 years?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (journal:Journal {name: 'Nature'})<-[:PUBLISHED_IN]-(article:Article)-[:WRITTEN_BY]->(author:Author)-[pub:PUBLISHED_IN]->() WHERE pub.year >= date().year - 3 RETURN author.first_name, author.last_name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Identify articles that are co-written by at least three authors from 'Harvard University'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {affiliation: 'Harvard University'})<-[:WRITTEN_BY]-(article:Article) WITH article, COUNT(author) AS num_authors WHERE num_authors >= 3 RETURN article.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How can I find out if 'Richard Feynman' has any solo-authored articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {first_name: 'Richard', last_name: 'Feynman'})<-[:WRITTEN_BY]-(article:Article) WITH author, article, COUNT(author) AS num_authors WHERE num_authors = 1 RETURN article.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there any articles that were updated after their publication year?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (article:Article)-[pub:PUBLISHED_IN]->(), (article)-[:UPDATED]->(updateDate:UpdateDate) WHERE updateDate.update_date.year > pub.year RETURN article.title, pub.year, updateDate.update_date"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Display a count of articles per author that have been updated in the last 5 years.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)<-[:WRITTEN_BY]-(article:Article)-[:UPDATED]->(updateDate:UpdateDate) WHERE updateDate.update_date >= date().year - 5 RETURN author.first_name, author.last_name, COUNT(article) AS updates_in_last_5_years"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you name the professors (authors with the title 'Prof.') who have written about 'Genomics'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)-[:WRITTEN_BY]->(article:Article), (keyword:Keyword {name: 'Genomics'})<-[:HAS_KEY]-(article) WHERE author.affiliation CONTAINS 'Prof.' RETURN author.first_name, author.last_name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the recent articles by 'Samantha Rhodes'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {first_name: 'Samantha', last_name: 'Rhodes'})<-[:WRITTEN_BY]-(article:Article)-[:UPDATED]->(updateDate:UpdateDate) WHERE updateDate.update_date.year = date().year RETURN article.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Show articles written by any 'Smith' in the discipline of 'Topology'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {last_name: 'Smith'})<-[:WRITTEN_BY]-(article:Article), (keyword:Keyword)-[:HAS_TOPIC]->(topic:Topic {description: 'Topology'})<-[:HAS_KEY]-(article) RETURN article.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the path between the article with article_id 1005 and the topic labeled 'Artificial Intelligence'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(a:Article {article_id: 1005})-[:HAS_KEY]->(:Keyword)-[:HAS_TOPIC]->(t:Topic {label: 'Artificial Intelligence'}) RETURN path"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you show how the author Jane Smith is connected to the Journal called 'Scientific Reports'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(author:Author {first_name: 'Jane', last_name: 'Smith'})-[:WRITTEN_BY]-(article:Article)-[:PUBLISHED_IN]->(journal:Journal {name: 'Scientific Reports'}) RETURN path"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the connection between the 'Global Health' topic and the 'Elsevier' journal through articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(t:Topic {label: 'Global Health'})<-[:HAS_TOPIC]-(:Keyword)<-[:HAS_KEY]-(a:Article)-[:PUBLISHED_IN]->(j:Journal {name: 'Elsevier'}) RETURN path"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How can I find the articles written by author with author_id 'AU123' which are related to the keyword 'Neuroscience'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {author_id: 'AU123'})-[:WRITTEN_BY]-(article:Article)-[:HAS_KEY]->(keyword:Keyword {name: 'Neuroscience'}) RETURN article.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the sequence of relationships from a report titled 'Annual Climate Summary' to the categories it's associated with?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(report:Report {report_no: 'Annual Climate Summary'})<-[:HAS_REPORT]-(article:Article)-[:HAS_CATEGORY]->(c:Categories) RETURN path"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you trace the path from a DOI named '10.1001/exampledoi' to any topics it might be linked to?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(doi:DOI {name: '10.1001/exampledoi'})<-[:HAS_DOI]-(article:Article)-[:HAS_KEY]->(:Keyword)-[:HAS_TOPIC]->(topic:Topic) RETURN path"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Show me how the article titled 'Advances in Quantum Computing' is categorized in the database.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (article:Article {title: 'Advances in Quantum Computing'})-[:HAS_CATEGORY]->(c:Categories) RETURN c.specifications"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How do I find the link between any updates made on '2021-01-01' to the journals they are published in?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(ud:UpdateDate {update_date: DATE('2021-01-01')})<-[:UPDATED]-(article:Article)-[:PUBLISHED_IN]->(journal:Journal) RETURN path"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Could you demonstrate the connection from an author to all their articles with a particular keyword 'Genetics'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author)-[:WRITTEN_BY]->(article:Article)-[:HAS_KEY]->(keyword:Keyword {name: 'Genetics'}) RETURN author, article.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the paths from articles updated in December 2020 to any associated topics?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(ud:UpdateDate)-[:UPDATED]-(article:Article)-[:HAS_KEY]->(:Keyword)-[:HAS_TOPIC]->(topic:Topic) WHERE ud.update_date >= DATE('2020-12-01') AND ud.update_date <= DATE('2020-12-31') RETURN path"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can we find the topics connected to articles by a certain author named 'Brian Cox'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {first_name: 'Brian', last_name: 'Cox'})-[:WRITTEN_BY]->(article:Article)-[:HAS_KEY]->(:Keyword)-[:HAS_TOPIC]->(topic:Topic) RETURN topic.label"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are all the reports derived from articles having the keyword 'Machine Learning'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (keyword:Keyword {name: 'Machine Learning'})<-[:HAS_KEY]-(article:Article)-[:HAS_REPORT]->(report:Report) RETURN report.report_no"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How do I locate the path from a topic description of 'Data Science' to its published articles' title?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(topic:Topic {description: 'Data Science'})<-[:HAS_TOPIC]-(:Keyword)<-[:HAS_KEY]-(article:Article) RETURN article.title"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you illustrate the route taken from articles in the 'Biochemistry' category to their DOIs?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(categories:Categories {specifications: 'Biochemistry'})<-[:HAS_CATEGORY]-(article:Article)-[:HAS_DOI]->(doi:DOI) RETURN path"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Show the connectivity between the journal 'Nature Communications' and the topics of its articles.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (journal:Journal {name: 'Nature Communications'})<-[:PUBLISHED_IN]-(article:Article)-[:HAS_KEY]->(:Keyword)-[:HAS_TOPIC]->(topic:Topic) RETURN topic.label"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How are articles with comments containing 'breakthrough' linked to their respective journals?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(article:Article)-[:PUBLISHED_IN]->(journal:Journal) WHERE article.comments CONTAINS 'breakthrough' RETURN path"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the relationship between authors affiliated with 'MIT' and the DOIs of their publications?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(author:Author {affiliation: 'MIT'})-[:WRITTEN_BY]->(article:Article)-[:HAS_DOI]->(doi:DOI) RETURN path"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can we determine the connection from an article abstract mentioning 'sustainable energy' to any related reports?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(article:Article)-[:HAS_REPORT]->(report:Report) WHERE article.abstract CONTAINS 'sustainable energy' RETURN path"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Show the link from the keyword 'Climate Change' to the articles published in the year 2022.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(keyword:Keyword {name: 'Climate Change'})<-[:HAS_KEY]-(article:Article)-[:PUBLISHED_IN]->(:Journal) WHERE article.year = 2022 RETURN path"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What paths exist from articles authored by 'Emily White' to any topics of interest?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {first_name: 'Emily', last_name: 'White'})-[:WRITTEN_BY]->(article:Article)-[:HAS_KEY]->(:Keyword)-[:HAS_TOPIC]->(topic:Topic) RETURN topic"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you map out the relationships from the report number 'RP-7890' to its associated categories?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(report:Report {report_no: 'RP-7890'})<-[:HAS_REPORT]-(article:Article)-[:HAS_CATEGORY]->(categories:Categories) RETURN path"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How can I find all the categories for articles that have been updated on or after '2022-06-01'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (ud:UpdateDate)-[:UPDATED]->(article:Article)-[:HAS_CATEGORY]->(categories:Categories) WHERE ud.update_date >= DATE('2022-06-01') RETURN categories.specifications"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What sequence of connections leads from the journal 'Cell' to the keywords of its articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(journal:Journal {name: 'Cell'})<-[:PUBLISHED_IN]-(article:Article)-[:HAS_KEY]->(keyword:Keyword) RETURN path"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Please find the path from article_id 3452 to the author(s) and their affiliation.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(article:Article {article_id: 3452})-[:WRITTEN_BY]->(author:Author) RETURN author.first_name, author.last_name, author.affiliation"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you identify authors who have written about the topic 'Renewable Energy' and the journals where they published?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (topic:Topic {label: 'Renewable Energy'})<-[:HAS_TOPIC]-(:Keyword)<-[:HAS_KEY]-(article:Article)-[:PUBLISHED_IN]->(journal:Journal), (article)-[:WRITTEN_BY]->(author:Author) RETURN author, journal.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How are authors who've written about 'Machine Learning' connected to the keywords of their articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(author:Author)-[:WRITTEN_BY]->(article:Article)-[:HAS_KEY]->(keyword:Keyword) WHERE any(word IN keywords(article.abstract) WHERE word = 'Machine Learning') RETURN path"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the paths from the category 'Physics' to any related DOIs?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(categories:Categories {specifications: 'Physics'})<-[:HAS_CATEGORY]-(article:Article)-[:HAS_DOI]->(doi:DOI) RETURN path"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can we track the updates made to articles within the 'Medicine' category and the date they occurred?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (categories:Categories {specifications: 'Medicine'})<-[:HAS_CATEGORY]-(article:Article)-[:UPDATED]->(updateDate:UpdateDate) RETURN article.title, updateDate"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Show the path from reports with report_no starting with '2021-' to articles and their keywords.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(report:Report)-[:HAS_REPORT]->(article:Article)-[:HAS_KEY]->(keyword:Keyword) WHERE report.report_no STARTS WITH '2021-' RETURN path"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the connection from an article with comments related to 'innovation' to its topics?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(article:Article)-[:HAS_KEY]->(:Keyword)-[:HAS_TOPIC]->(topic:Topic) WHERE article.comments CONTAINS 'innovation' RETURN path"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How do I find the authors with the last name 'Garcia' and the topics associated with their articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {last_name: 'Garcia'})-[:WRITTEN_BY]->(article:Article)-[:HAS_KEY]->(:Keyword)-[:HAS_TOPIC]->(topic:Topic) RETURN author, topic.label"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the paths from any journals updated in the last quarter of 2021 to their articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(journal:Journal)<-[:PUBLISHED_IN]-(article:Article)-[:UPDATED]->(updateDate:UpdateDate) WHERE updateDate.update_date >= DATE('2021-10-01') AND updateDate.update_date <= DATE('2021-12-31') RETURN path"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Show me the sequence of relationships from the categories describing 'Astronomy' to their related report numbers.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(categories:Categories {specifications: 'Astronomy'})<-[:HAS_CATEGORY]-(article:Article)-[:HAS_REPORT]->(report:Report) RETURN report.report_no"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you find the connections from the DOI named '10.1016/j.patter' to the articles' abstracts?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(doi:DOI {name: '10.1016/j.patter'})<-[:HAS_DOI]-(article:Article) RETURN article.abstract"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How can I trace the path between an Article with the title 'Solar Energy Utilization' to the keywords it contains?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(article:Article {title: 'Solar Energy Utilization'})-[:HAS_KEY]->(keyword:Keyword) RETURN keyword.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the link from keywords related to 'Biodiversity' to their corresponding report numbers?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(keyword:Keyword {name: 'Biodiversity'})<-[:HAS_KEY]-(article:Article)-[:HAS_REPORT]->(report:Report) RETURN report.report_no"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can we map out the articles written by 'Angela Hart' and the last update date for each?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {first_name: 'Angela', last_name: 'Hart'})-[:WRITTEN_BY]->(article:Article)-[:UPDATED]->(updateDate:UpdateDate) RETURN article.title, updateDate.update_date"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Show the relationships from topics with the description 'Climate Solutions' to their keywords.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(topic:Topic {description: 'Climate Solutions'})<-[:HAS_TOPIC]-(keyword:Keyword) RETURN keyword.name"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How do articles that have the 'Economics' category relate to their publication journals?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH path=(categories:Categories {specifications: 'Economics'})<-[:HAS_CATEGORY]-(article:Article)-[:PUBLISHED_IN]->(journal:Journal) RETURN path"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the titles of the articles that contain the most frequently appearing keyword?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)<-[:HAS_KEY]-(a:Article) RETURN a.title as Title, COUNT(*) as Frequency ORDER BY Frequency DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you find out which author has written the most articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Author)-[:WRITTEN_BY]-(a:Article) RETURN a.author_id, COUNT(*) as ArticleCount ORDER BY ArticleCount DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which article has been updated most recently?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(u:UpdateDate) RETURN a.title as Title, u.update_date as UpdateDate ORDER BY UpdateDate DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the average number of articles per journal?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)<-[:PUBLISHED_IN]-(a:Article) RETURN j.name as JournalName, COUNT(a) as ArticleCount, AVG(COUNT(a)) as AvgArticleCount"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Who's the author with the largest number of different affiliated journals?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author)-[:WRITTEN_BY]->(ar:Article)-[:PUBLISHED_IN]->(j:Journal) RETURN a.author_id, COUNT(DISTINCT j) as DistinctJournals ORDER BY DistinctJournals DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you identify the most central DOI in the graph based on its connectivity?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (d:DOI)<-[:HAS_DOI]-(a:Article) RETURN d.doi_id as DOIID, COUNT(a) as Connections ORDER BY Connections DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which category of articles have the most extensive coverage in terms of number of articles tagged?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (c:Categories)<-[:HAS_CATEGORY]-(a:Article) RETURN c.category_id as CategoryID, COUNT(a) as ArticleCount ORDER BY ArticleCount DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Find me the author with the highest article publication rate per year.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author)-[:WRITTEN_BY]->(ar:Article)-[:PUBLISHED_IN]->(j:Journal) RETURN a.author_id as AuthorID, COUNT(ar) as TotalArticles, RANGE(MIN(j.year), MAX(j.year), 1) as Years, COUNT(ar) / SIZE(RANGE(MIN(j.year), MAX(j.year), 1)) as Rate ORDER BY Rate DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which report is associated with the highest number of articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (r:Report)<-[:HAS_REPORT]-(a:Article) RETURN r.report_id as ReportID, COUNT(a) as ArticleCount ORDER BY ArticleCount DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the distribution of articles across different categories?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (cat:Categories)<-[:HAS_CATEGORY]-(a:Article) RETURN cat.category_id as CategoryID, COUNT(a) as ArticleCount"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you show me the top 5 authors by the number of comments their articles have received?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (auth:Author)-[:WRITTEN_BY]->(a:Article) RETURN auth.author_id as AuthorID, SUM(LENGTH(a.comments)) as TotalComments ORDER BY TotalComments DESC LIMIT 5"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which topic is associated with the largest number of keywords?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (t:Topic)<-[:HAS_TOPIC]-(k:Keyword) RETURN t.label as TopicLabel, COUNT(k) as KeywordCount ORDER BY KeywordCount DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Identify the article that deals with the broadest array of topics.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_KEY]->(k:Keyword)-[:HAS_TOPIC]->(t:Topic) RETURN a.article_id as ArticleID, COUNT(DISTINCT t) as TopicCount ORDER BY TopicCount DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the top 3 journals with the longest page lengths for articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Journal)<-[:PUBLISHED_IN]-(a:Article) RETURN a.title as Title, SUM(TOINTEGER(a.pages)) as TotalPages ORDER BY TotalPages DESC LIMIT 3"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can we determine the journal that specializes in the most distinct categories of articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)<-[:PUBLISHED_IN]-(a:Article)-[:HAS_CATEGORY]->(cat:Categories) RETURN j.name as JournalName, COUNT(DISTINCT cat) as CategoryCount ORDER BY CategoryCount DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many articles are there per year on average?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Journal)<-[:PUBLISHED_IN {year: year}]-(a:Article) RETURN year, COUNT(a) as ArticleCount, AVG(COUNT(a)) as AvgArticleCount"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Identify the author with the broadest range of article topics.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (auth:Author)-[:WRITTEN_BY]->(a:Article)-[:HAS_KEY]->(k:Keyword)-[:HAS_TOPIC]->(t:Topic) RETURN auth.author_id as AuthorID, COUNT(DISTINCT t) as TopicRange ORDER BY TopicRange DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which article's abstract has the highest word count?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article) RETURN a.article_id as ArticleID, LENGTH(SPLIT(a.abstract, ' ')) as WordCount ORDER BY WordCount DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you find the average number of pages for articles in each journal?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)<-[:PUBLISHED_IN]-(a:Article) RETURN j.name, AVG(TOINTEGER(a.pages)) as AvgPages"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the common publication year for articles under the 'Technology' category?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (cat:Categories {category_id: 'Technology'})<-[:HAS_CATEGORY]-(a:Article)-[:PUBLISHED_IN]->(j:Journal) RETURN j.year, COUNT(a) as ArticleCount ORDER BY ArticleCount DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many distinct authors are there in the database?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author) RETURN COUNT(DISTINCT a) as AuthorCount"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Identify the keyword with the fewest associated topics.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)-[:HAS_TOPIC]->(t:Topic) RETURN k.name as KeywordName, COUNT(t) as TopicCount ORDER BY TopicCount ASC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the length of the longest path between any two keywords in the graph?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH p=(k1:Keyword)-[*]-(k2:Keyword) WHERE k1 <> k2 RETURN LENGTH(p) as PathLength ORDER BY PathLength DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there any authors who published in every journal in the graph?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (auth:Author), (j:Journal) WHERE NOT EXISTS ((auth)-[:WRITTEN_BY]->()-[:PUBLISHED_IN]->(j)) RETURN auth.author_id"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the maximum number of reports associated with any single article?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_REPORT]->(r:Report) RETURN a.article_id as ArticleID, COUNT(r) as ReportCount ORDER BY ReportCount DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Find the topic that most articles are associated with indirectly through keywords.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_KEY]->(k:Keyword)-[:HAS_TOPIC]->(t:Topic) RETURN t.label as TopicLabel, COUNT(DISTINCT a) as ArticleCount ORDER BY ArticleCount DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many articles were published before the year 2000?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:PUBLISHED_IN]->(j:Journal) WHERE j.year < 2000 RETURN COUNT(a) as ArticleCount"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you determine the pair of authors that have co-authored articles the most frequently?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (auth1:Author)-[:WRITTEN_BY]->(a:Article)<-[:WRITTEN_BY]-(auth2:Author) WHERE auth1.author_id < auth2.author_id RETURN auth1.author_id, auth2.author_id, COUNT(a) as CoAuthoredArticleCount ORDER BY CoAuthoredArticleCount DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Identify the keyword that correlates with the highest number of different DOIs.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)<-[:HAS_KEY]-(a:Article)-[:HAS_DOI]->(d:DOI) RETURN k.name as KeywordName, COUNT(DISTINCT d) as DOICount ORDER BY DOICount DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the total number of distinct topics covered across all articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Article)-[:HAS_KEY]->(:Keyword)-[:HAS_TOPIC]->(t:Topic) RETURN COUNT(DISTINCT t) as TotalTopics"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which category has the highest average comments on their articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (c:Categories)<-[:HAS_CATEGORY]-(a:Article) RETURN c.category_id as CategoryID, AVG(LENGTH(a.comments)) as AvgComments ORDER BY AvgComments DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How often does each keyword appear across all articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)<-[:HAS_KEY]-(a:Article) RETURN k.name as KeywordName, COUNT(a) as ArticleCount"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you rank journals by the average year of publication for their articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal)<-[:PUBLISHED_IN]-(a:Article) RETURN j.name as JournalName, AVG(j.year) as AvgYear ORDER BY AvgYear"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the median number of articles written by authors?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (auth:Author)-[:WRITTEN_BY]->(a:Article) RETURN auth.author_id as AuthorID, COUNT(a) as ArticleCount ORDER BY ArticleCount RETURN apoc.coll.median(COLLECT(ArticleCount)) as MedianArticleCount"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Identify the pattern of relationships between the most common topics and keywords.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (t:Topic)<-[:HAS_TOPIC]-(k:Keyword) RETURN k.name as KeywordName, t.label as TopicLabel, COUNT(*) as Frequency ORDER BY Frequency DESC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many articles have been updated in the last year?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(u:UpdateDate) WHERE u.update_date >= DATE('2022-01-01') RETURN COUNT(a) as RecentUpdates"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What's the shortest path between the two most frequently mentioned keywords in articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k1:Keyword)<-[:HAS_KEY]-(a:Article)-[:HAS_KEY]->(k2:Keyword) WHERE k1 <> k2 WITH k1, k2, COUNT(a) as Frequency ORDER BY Frequency DESC LIMIT 2 MATCH p=shortestPath((k1)-[*]-(k2)) RETURN LENGTH(p) as ShortestPathLength"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which year saw the maximum number of article updates?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(u:UpdateDate) RETURN u.update_date.year as Year, COUNT(a) as UpdateCount ORDER BY UpdateCount DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you find any authors who have never updated their articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Author)-[:WRITTEN_BY]->(ar:Article) WHERE NOT (ar)-[:UPDATED]->() RETURN a.author_id as AuthorID"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which topic's description has the longest length in terms of characters?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (t:Topic) RETURN t.label as TopicLabel, LENGTH(t.description) as DescriptionLength ORDER BY DescriptionLength DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Identify the keywords that have been used in combination with the most distinct Journals.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword)<-[:HAS_KEY]-(a:Article)-[:PUBLISHED_IN]->(j:Journal) RETURN k.name as KeywordName, COUNT(DISTINCT j) as JournalCount ORDER BY JournalCount DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the range of pages for articles published by a specific author, say 'Author A'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (auth:Author {author_id: 'AuthorA'})-[:WRITTEN_BY]->(a:Article)-[:PUBLISHED_IN]->() RETURN MIN(TOINTEGER(a.pages)) as MinPages, MAX(TOINTEGER(a.pages)) as MaxPages"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you list the collaboration network for a specific author identified by 'AuthorB'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (auth:Author {author_id: 'AuthorB'})-[:WRITTEN_BY]->(a:Article)<-[:WRITTEN_BY]-(coAuth:Author) RETURN coAuth.author_id as CollaboratorID, COUNT(a) as CollaborationCount ORDER BY CollaborationCount DESC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the total count of reports linked to articles on a particular topic, say 'Machine Learning'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (t:Topic {label: 'Machine Learning'})<-[:HAS_TOPIC]-(:Keyword)<-[:HAS_KEY]-(a:Article)-[:HAS_REPORT]->(r:Report) RETURN COUNT(DISTINCT r) as ReportCount"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Who is the most prolific author in a specific journal, say 'Journal X'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal {name: 'Journal X'})<-[:PUBLISHED_IN]-(a:Article)-[:WRITTEN_BY]->(auth:Author) RETURN auth.author_id as AuthorID, COUNT(a) as ArticleCount ORDER BY ArticleCount DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you tell me which articles are associated with the report ID 'R123'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_REPORT]->(r:Report {report_id: 'R123'}) RETURN a.title AS ArticleTitle"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the report numbers for articles written by author John Doe?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:WRITTEN_BY]->(author:Author {first_name: 'John', last_name: 'Doe'})-[:HAS_REPORT]->(r:Report) RETURN r.report_no AS ReportNumber"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Could you list down all the reports with their associated article titles published in 2021?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:PUBLISHED_IN]->(j:Journal {year: 2021})-[:HAS_REPORT]->(r:Report) RETURN a.title AS ArticleTitle, r.report_no AS ReportNumber"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What articles have been linked to a report with 'security' in its report number?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_REPORT]->(r:Report) WHERE r.report_no CONTAINS 'security' RETURN a.title AS ArticleTitle"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Find me all the report IDs that correspond to articles on the topic of 'Artificial Intelligence'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_KEY]->(:Keyword)-[:HAS_TOPIC]->(t:Topic {label: 'Artificial Intelligence'})-[:HAS_REPORT]->(r:Report) RETURN r.report_id AS ReportID"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the titles of articles that don't have any associated report?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article) WHERE NOT (a)-[:HAS_REPORT]->() RETURN a.title AS ArticleWithoutReport"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there any reports tied to articles by the author with author_id 'A456'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {author_id: 'A456'})-[:WRITTEN_BY]->(a:Article)-[:HAS_REPORT]->(r:Report) RETURN r.report_id AS ReportID, r.report_no AS ReportNumber"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How many reports are linked to the article titled 'Graph Databases 101'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article {title: 'Graph Databases 101'})-[:HAS_REPORT]->(r:Report) RETURN COUNT(r) AS NumberOfReports"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What is the latest report update for the articles in the 'Technology' category?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (c:Categories {specifications: 'Technology'})<-[:HAS_CATEGORY]-(a:Article)-[:HAS_REPORT]->(r:Report) RETURN a.title AS ArticleTitle, r.report_no AS LatestReportUpdated"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can we get a list of all report numbers linked to articles published by the 'Journal of Neo4j'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:PUBLISHED_IN]->(j:Journal {name: 'Journal of Neo4j'})-[:HAS_REPORT]->(r:Report) RETURN r.report_no AS ReportNumber"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which articles linked to reports were updated in January 2021?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date >= date('2021-01-01') AND ud.update_date <= date('2021-01-31')-[:HAS_REPORT]->(r:Report) RETURN a.title AS ArticleTitle"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What's the count of articles related to the 'climate change' topic with a report?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (:Topic {label: 'climate change'})<-[:HAS_TOPIC]-(:Keyword)<-[:HAS_KEY]-(a:Article)-[:HAS_REPORT]->(r:Report) RETURN COUNT(a) AS ArticlesWithReportCount"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can I see all report IDs of articles written by 'Emily Stone'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {first_name: 'Emily', last_name: 'Stone'})-[:WRITTEN_BY]->(a:Article)-[:HAS_REPORT]->(r:Report) RETURN r.report_id AS ReportID"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Which reports have a greater than 100-page count in articles on 'Machine Learning'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword {name: 'Machine Learning'})<-[:HAS_KEY]-(a:Article)-[:PUBLISHED_IN {pages: p}]->(j:Journal) WHERE TOINTEGER(p) > 100-[:HAS_REPORT]->(r:Report) RETURN r.report_no AS ReportNumber"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there any articles connected to report 'R789' in the 'Medical' Category?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_CATEGORY]->(c:Categories {specifications: 'Medical'})-[:HAS_REPORT]->(r:Report {report_id: 'R789'}) RETURN a.title AS ArticleTitle"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Show me the articles with associated report numbers that cite DOI '10.1000/xyz123'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (d:DOI {name: '10.1000/xyz123'})<-[:HAS_DOI]-(a:Article)-[:HAS_REPORT]->(r:Report) RETURN a.title AS ArticleTitle, r.report_no AS ReportNumber"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can we find out if there are any articles about 'Blockchain' with a linked report from 2019?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword {name: 'Blockchain'})<-[:HAS_KEY]-(a:Article)-[:PUBLISHED_IN]->(j:Journal {year: 2019})-[:HAS_REPORT]->(r:Report) RETURN EXISTS((a)-[:HAS_REPORT]->(r)) AS HasReport"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Identify all articles with links to reports by 'SciTech Journal'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal {name: 'SciTech Journal'})<-[:PUBLISHED_IN]-(a:Article)-[:HAS_REPORT]->(r:Report) RETURN a.title AS ArticleTitle, r.report_id AS ReportID"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How can I extract the titles of articles that have a report numbered 'RPT-001C'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_REPORT]->(r:Report {report_no: 'RPT-001C'}) RETURN a.title AS ArticleTitle"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Could you summarize the report details for articles authored by someone from 'MIT'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:WRITTEN_BY]->(author:Author {affiliation: 'MIT'})-[:HAS_REPORT]->(r:Report) RETURN a.title AS ArticleTitle, r.report_no AS ReportNumber, r.report_id AS ReportID"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What reports are connected to articles that cover 'Quantum Computing'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword {name: 'Quantum Computing'})<-[:HAS_KEY]-(a:Article)-[:HAS_REPORT]->(r:Report) RETURN r.report_no AS ReportNumber"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there any articles with a report updated most recently in the 'Data Science' field?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate)-[:HAS_REPORT]->(r:Report) RETURN a.title AS ArticleTitle ORDER BY ud.update_date DESC LIMIT 1"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "I need all the articles with report numbers where the keyword is related to 'neuroscience'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_KEY]->(k:Keyword)-[:HAS_TOPIC]->(t:Topic {description: 'neuroscience'})-[:HAS_REPORT]->(r:Report) RETURN a.title AS ArticleWithTitle, r.report_no AS ReportNumber"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What's the report identifier for the article titled 'The Next Web Revolution'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article {title: 'The Next Web Revolution'})-[:HAS_REPORT]->(r:Report) RETURN r.report_id AS ReportID"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Do we have reports for articles cited in journals with the ID 'J101'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal {journal_id: 'J101'})<-[:PUBLISHED_IN]-(a:Article)-[:HAS_REPORT]->(r:Report) RETURN COUNT(r) AS ReportsCount"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you identify all report IDs for articles updated on '2022-12-25'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate {update_date: date('2022-12-25')})-[:HAS_REPORT]->(r:Report) RETURN a.title AS ArticleTitle, r.report_id AS ReportID"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there any articles that have an associated report and were published in 'Nature' journal?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (j:Journal {name: 'Nature'})<-[:PUBLISHED_IN]-(a:Article)-[:HAS_REPORT]->(r:Report) RETURN a.title AS ArticleTitle, r.report_no AS ReportNumber"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Retrieve the article abstracts for those with reports published with more than 50 pages.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:PUBLISHED_IN]->(j:Journal)-[:HAS_REPORT]->(r:Report {pages: p}) WHERE TOINTEGER(p) > 50 RETURN a.abstract AS ArticleAbstract"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How can we get a list of reports associated with the most recently updated articles?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate)-[:HAS_REPORT]->(r:Report) RETURN a.title AS ArticleTitle, r.report_no AS ReportNumber ORDER BY ud.update_date DESC"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Are there reports related to articles that deal with 'global warming' as a keyword topic?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (t:Topic {label: 'global warming'})<-[:HAS_TOPIC]-(k:Keyword)<-[:HAS_KEY]-(a:Article)-[:HAS_REPORT]->(r:Report) RETURN a.title AS ArticleTitle, r.report_id AS ReportID"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the report details for articles that have 'biochemistry' as a keyword?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword {name: 'biochemistry'})<-[:HAS_KEY]-(a:Article)-[:HAS_REPORT]->(r:Report) RETURN a.article_id AS ArticleID, r.report_id AS ReportID, r.report_no AS ReportNumber"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "List the articles with their report numbers where the author's last name is 'Smith' and first name starts with a 'J'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (author:Author {last_name: 'Smith'})-[:WRITTEN_BY]->(a:Article) WHERE author.first_name STARTS WITH 'J'-[:HAS_REPORT]->(r:Report) RETURN a.title AS ArticleTitle, r.report_no AS ReportNumber"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Find all the report numbers for articles that discuss 'Quantum Mechanics' and were updated in the last year.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_KEY]->(k:Keyword)-[:HAS_TOPIC]->(t:Topic {description: 'Quantum Mechanics'})-[:UPDATED]->(ud:UpdateDate) WHERE ud.update_date >= date('2022-01-01')-[:HAS_REPORT]->(r:Report) RETURN r.report_no AS ReportNumber"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can you locate the report IDs for the articles that are not part of any journal?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article) WHERE NOT (a)-[:PUBLISHED_IN]->()-[:HAS_REPORT]->(r:Report) RETURN a.title AS ArticleTitle, r.report_id AS ReportID"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "How can we identify the authors of articles with the report number 'RP-2042'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_REPORT]->(r:Report {report_no: 'RP-2042'})-[:WRITTEN_BY]->(author:Author) RETURN author.first_name AS FirstName, author.last_name AS LastName"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Extract all articles with report IDs from the 'Physics' category.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_CATEGORY]->(:Categories {specifications: 'Physics'})-[:HAS_REPORT]->(r:Report) RETURN a.title AS ArticleTitle, r.report_id AS ReportID"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "List the articles and their corresponding report numbers that contain the keyword 'Renewable Energy'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (k:Keyword {name: 'Renewable Energy'})<-[:HAS_KEY]-(a:Article)-[:HAS_REPORT]->(r:Report) RETURN a.title AS ArticleTitle, r.report_no AS ReportNumber"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "What are the report numbers linked to articles that have abstracts containing the word 'innovative'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_REPORT]->(r:Report) WHERE a.abstract CONTAINS 'innovative' RETURN a.title AS ArticleTitle, r.report_no AS ReportNumber"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Show me the articles that have reports from the Journal with ID 'J333' which are updated after '2021-06-01'.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:UPDATED]->(ud:UpdateDate {update_date: date('2021-06-01')})-[:PUBLISHED_IN]->(j:Journal {journal_id: 'J333'})-[:HAS_REPORT]->(r:Report) RETURN a.title AS ArticleTitle, r.report_no AS ReportNumber"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Retrieve the articles with a specific report ID pattern such as 'REP-_____', where the blanks can be any digit.", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_REPORT]->(r:Report) WHERE r.report_id =~ 'REP-\\d{5}' RETURN a.title AS ArticleTitle, r.report_id AS ReportID"}, {"Prompt": "Convert the following question into a Cypher query using the provided graph schema!", "Question": "Can we find articles that have both a keyword of 'Genomics' and a report published in 'Science Journal'?", "Schema": "Graph schema: Node properties are the following:\n\nArticle {abstract: STRING, article_id: INTEGER, comments: STRING, title: STRING},Keyword {name: STRING, key_id: STRING},\nTopic {cluster: INTEGER, description: STRING, label: STRING},\nAuthor {author_id: STRING, affiliation: STRING, first_name: STRING, last_name: STRING},\nDOI {name: STRING, doi_id: STRING},Categories {category_id: STRING, specifications: STRING},\nReport {report_id: STRING, report_no: STRING},\nUpdateDate {update_date: DATE},Journal {name: STRING, journal_id: STRING}\n\nRelationship properties are the following:\n\nPUBLISHED_IN {meta: STRING, pages: STRING, year: INTEGER}\n\nThe relationships are the following:\n\n(:Article)-[:HAS_KEY]->(:Keyword),\n(:Article)-[:HAS_DOI]->(:DOI),\n(:Article)-[:HAS_CATEGORY]->(:Categories),\n(:Article)-[:WRITTEN_BY]->(:Author),\n(:Article)-[:UPDATED]->(:UpdateDate),\n(:Article)-[:PUBLISHED_IN]->(:Journal),\n(:Article)-[:HAS_REPORT]->(:Report),\n(:Keyword)-[:HAS_TOPIC]->(:Topic)\n", "Cypher": "MATCH (a:Article)-[:HAS_KEY]->(k:Keyword {name: 'Genomics'})-[:PUBLISHED_IN]->(j:Journal {name: 'Science Journal'})-[:HAS_REPORT]->(r:Report) RETURN a.title AS ArticleTitle, r.report_no AS ReportNumber"}]